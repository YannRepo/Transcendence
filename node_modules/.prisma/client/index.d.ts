
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Friends
 * 
 */
export type Friends = $Result.DefaultSelection<Prisma.$FriendsPayload>
/**
 * Model Avatar
 * 
 */
export type Avatar = $Result.DefaultSelection<Prisma.$AvatarPayload>
/**
 * Model Channel
 * 
 */
export type Channel = $Result.DefaultSelection<Prisma.$ChannelPayload>
/**
 * Model ChannelUser
 * 
 */
export type ChannelUser = $Result.DefaultSelection<Prisma.$ChannelUserPayload>
/**
 * Model ChannelMessage
 * 
 */
export type ChannelMessage = $Result.DefaultSelection<Prisma.$ChannelMessagePayload>
/**
 * Model SourceBans
 * 
 */
export type SourceBans = $Result.DefaultSelection<Prisma.$SourceBansPayload>
/**
 * Model runningames
 * 
 */
export type runningames = $Result.DefaultSelection<Prisma.$runningamesPayload>
/**
 * Model gameHistory
 * 
 */
export type gameHistory = $Result.DefaultSelection<Prisma.$gameHistoryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ChannelType: {
  PUBLIC: 'PUBLIC',
  PROTECTED: 'PROTECTED',
  PRIVATE: 'PRIVATE',
  CONVERSATION: 'CONVERSATION'
};

export type ChannelType = (typeof ChannelType)[keyof typeof ChannelType]


export const ChannelUserRole: {
  NORMAL: 'NORMAL',
  ADMIN: 'ADMIN',
  OWNER: 'OWNER'
};

export type ChannelUserRole = (typeof ChannelUserRole)[keyof typeof ChannelUserRole]

}

export type ChannelType = $Enums.ChannelType

export const ChannelType: typeof $Enums.ChannelType

export type ChannelUserRole = $Enums.ChannelUserRole

export const ChannelUserRole: typeof $Enums.ChannelUserRole

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.friends`: Exposes CRUD operations for the **Friends** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friends
    * const friends = await prisma.friends.findMany()
    * ```
    */
  get friends(): Prisma.FriendsDelegate<ExtArgs>;

  /**
   * `prisma.avatar`: Exposes CRUD operations for the **Avatar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Avatars
    * const avatars = await prisma.avatar.findMany()
    * ```
    */
  get avatar(): Prisma.AvatarDelegate<ExtArgs>;

  /**
   * `prisma.channel`: Exposes CRUD operations for the **Channel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channel.findMany()
    * ```
    */
  get channel(): Prisma.ChannelDelegate<ExtArgs>;

  /**
   * `prisma.channelUser`: Exposes CRUD operations for the **ChannelUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChannelUsers
    * const channelUsers = await prisma.channelUser.findMany()
    * ```
    */
  get channelUser(): Prisma.ChannelUserDelegate<ExtArgs>;

  /**
   * `prisma.channelMessage`: Exposes CRUD operations for the **ChannelMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChannelMessages
    * const channelMessages = await prisma.channelMessage.findMany()
    * ```
    */
  get channelMessage(): Prisma.ChannelMessageDelegate<ExtArgs>;

  /**
   * `prisma.sourceBans`: Exposes CRUD operations for the **SourceBans** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SourceBans
    * const sourceBans = await prisma.sourceBans.findMany()
    * ```
    */
  get sourceBans(): Prisma.SourceBansDelegate<ExtArgs>;

  /**
   * `prisma.runningames`: Exposes CRUD operations for the **runningames** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Runningames
    * const runningames = await prisma.runningames.findMany()
    * ```
    */
  get runningames(): Prisma.runningamesDelegate<ExtArgs>;

  /**
   * `prisma.gameHistory`: Exposes CRUD operations for the **gameHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GameHistories
    * const gameHistories = await prisma.gameHistory.findMany()
    * ```
    */
  get gameHistory(): Prisma.gameHistoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.1
   * Query Engine version: 61e140623197a131c2a6189271ffee05a7aa9a59
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Friends: 'Friends',
    Avatar: 'Avatar',
    Channel: 'Channel',
    ChannelUser: 'ChannelUser',
    ChannelMessage: 'ChannelMessage',
    SourceBans: 'SourceBans',
    runningames: 'runningames',
    gameHistory: 'gameHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'friends' | 'avatar' | 'channel' | 'channelUser' | 'channelMessage' | 'sourceBans' | 'runningames' | 'gameHistory'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Friends: {
        payload: Prisma.$FriendsPayload<ExtArgs>
        fields: Prisma.FriendsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FriendsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FriendsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FriendsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FriendsPayload>
          }
          findFirst: {
            args: Prisma.FriendsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FriendsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FriendsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FriendsPayload>
          }
          findMany: {
            args: Prisma.FriendsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FriendsPayload>[]
          }
          create: {
            args: Prisma.FriendsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FriendsPayload>
          }
          createMany: {
            args: Prisma.FriendsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FriendsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FriendsPayload>
          }
          update: {
            args: Prisma.FriendsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FriendsPayload>
          }
          deleteMany: {
            args: Prisma.FriendsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FriendsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FriendsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FriendsPayload>
          }
          aggregate: {
            args: Prisma.FriendsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFriends>
          }
          groupBy: {
            args: Prisma.FriendsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FriendsGroupByOutputType>[]
          }
          count: {
            args: Prisma.FriendsCountArgs<ExtArgs>,
            result: $Utils.Optional<FriendsCountAggregateOutputType> | number
          }
        }
      }
      Avatar: {
        payload: Prisma.$AvatarPayload<ExtArgs>
        fields: Prisma.AvatarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AvatarFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AvatarFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          findFirst: {
            args: Prisma.AvatarFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AvatarFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          findMany: {
            args: Prisma.AvatarFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>[]
          }
          create: {
            args: Prisma.AvatarCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          createMany: {
            args: Prisma.AvatarCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AvatarDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          update: {
            args: Prisma.AvatarUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          deleteMany: {
            args: Prisma.AvatarDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AvatarUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AvatarUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvatarPayload>
          }
          aggregate: {
            args: Prisma.AvatarAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAvatar>
          }
          groupBy: {
            args: Prisma.AvatarGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AvatarGroupByOutputType>[]
          }
          count: {
            args: Prisma.AvatarCountArgs<ExtArgs>,
            result: $Utils.Optional<AvatarCountAggregateOutputType> | number
          }
        }
      }
      Channel: {
        payload: Prisma.$ChannelPayload<ExtArgs>
        fields: Prisma.ChannelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChannelFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChannelFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          findFirst: {
            args: Prisma.ChannelFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChannelFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          findMany: {
            args: Prisma.ChannelFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>[]
          }
          create: {
            args: Prisma.ChannelCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          createMany: {
            args: Prisma.ChannelCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChannelDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          update: {
            args: Prisma.ChannelUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          deleteMany: {
            args: Prisma.ChannelDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChannelUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChannelUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelPayload>
          }
          aggregate: {
            args: Prisma.ChannelAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChannel>
          }
          groupBy: {
            args: Prisma.ChannelGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChannelGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChannelCountArgs<ExtArgs>,
            result: $Utils.Optional<ChannelCountAggregateOutputType> | number
          }
        }
      }
      ChannelUser: {
        payload: Prisma.$ChannelUserPayload<ExtArgs>
        fields: Prisma.ChannelUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChannelUserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChannelUserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelUserPayload>
          }
          findFirst: {
            args: Prisma.ChannelUserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChannelUserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelUserPayload>
          }
          findMany: {
            args: Prisma.ChannelUserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelUserPayload>[]
          }
          create: {
            args: Prisma.ChannelUserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelUserPayload>
          }
          createMany: {
            args: Prisma.ChannelUserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChannelUserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelUserPayload>
          }
          update: {
            args: Prisma.ChannelUserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelUserPayload>
          }
          deleteMany: {
            args: Prisma.ChannelUserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChannelUserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChannelUserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelUserPayload>
          }
          aggregate: {
            args: Prisma.ChannelUserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChannelUser>
          }
          groupBy: {
            args: Prisma.ChannelUserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChannelUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChannelUserCountArgs<ExtArgs>,
            result: $Utils.Optional<ChannelUserCountAggregateOutputType> | number
          }
        }
      }
      ChannelMessage: {
        payload: Prisma.$ChannelMessagePayload<ExtArgs>
        fields: Prisma.ChannelMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChannelMessageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChannelMessageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelMessagePayload>
          }
          findFirst: {
            args: Prisma.ChannelMessageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChannelMessageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelMessagePayload>
          }
          findMany: {
            args: Prisma.ChannelMessageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelMessagePayload>[]
          }
          create: {
            args: Prisma.ChannelMessageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelMessagePayload>
          }
          createMany: {
            args: Prisma.ChannelMessageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChannelMessageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelMessagePayload>
          }
          update: {
            args: Prisma.ChannelMessageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChannelMessageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChannelMessageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChannelMessageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChannelMessagePayload>
          }
          aggregate: {
            args: Prisma.ChannelMessageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChannelMessage>
          }
          groupBy: {
            args: Prisma.ChannelMessageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChannelMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChannelMessageCountArgs<ExtArgs>,
            result: $Utils.Optional<ChannelMessageCountAggregateOutputType> | number
          }
        }
      }
      SourceBans: {
        payload: Prisma.$SourceBansPayload<ExtArgs>
        fields: Prisma.SourceBansFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SourceBansFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourceBansPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SourceBansFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourceBansPayload>
          }
          findFirst: {
            args: Prisma.SourceBansFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourceBansPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SourceBansFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourceBansPayload>
          }
          findMany: {
            args: Prisma.SourceBansFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourceBansPayload>[]
          }
          create: {
            args: Prisma.SourceBansCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourceBansPayload>
          }
          createMany: {
            args: Prisma.SourceBansCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SourceBansDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourceBansPayload>
          }
          update: {
            args: Prisma.SourceBansUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourceBansPayload>
          }
          deleteMany: {
            args: Prisma.SourceBansDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SourceBansUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SourceBansUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SourceBansPayload>
          }
          aggregate: {
            args: Prisma.SourceBansAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSourceBans>
          }
          groupBy: {
            args: Prisma.SourceBansGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SourceBansGroupByOutputType>[]
          }
          count: {
            args: Prisma.SourceBansCountArgs<ExtArgs>,
            result: $Utils.Optional<SourceBansCountAggregateOutputType> | number
          }
        }
      }
      runningames: {
        payload: Prisma.$runningamesPayload<ExtArgs>
        fields: Prisma.runningamesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.runningamesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$runningamesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.runningamesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$runningamesPayload>
          }
          findFirst: {
            args: Prisma.runningamesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$runningamesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.runningamesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$runningamesPayload>
          }
          findMany: {
            args: Prisma.runningamesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$runningamesPayload>[]
          }
          create: {
            args: Prisma.runningamesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$runningamesPayload>
          }
          createMany: {
            args: Prisma.runningamesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.runningamesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$runningamesPayload>
          }
          update: {
            args: Prisma.runningamesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$runningamesPayload>
          }
          deleteMany: {
            args: Prisma.runningamesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.runningamesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.runningamesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$runningamesPayload>
          }
          aggregate: {
            args: Prisma.RunningamesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRunningames>
          }
          groupBy: {
            args: Prisma.runningamesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RunningamesGroupByOutputType>[]
          }
          count: {
            args: Prisma.runningamesCountArgs<ExtArgs>,
            result: $Utils.Optional<RunningamesCountAggregateOutputType> | number
          }
        }
      }
      gameHistory: {
        payload: Prisma.$gameHistoryPayload<ExtArgs>
        fields: Prisma.gameHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.gameHistoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gameHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.gameHistoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gameHistoryPayload>
          }
          findFirst: {
            args: Prisma.gameHistoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gameHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.gameHistoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gameHistoryPayload>
          }
          findMany: {
            args: Prisma.gameHistoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gameHistoryPayload>[]
          }
          create: {
            args: Prisma.gameHistoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gameHistoryPayload>
          }
          createMany: {
            args: Prisma.gameHistoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.gameHistoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gameHistoryPayload>
          }
          update: {
            args: Prisma.gameHistoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gameHistoryPayload>
          }
          deleteMany: {
            args: Prisma.gameHistoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.gameHistoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.gameHistoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$gameHistoryPayload>
          }
          aggregate: {
            args: Prisma.GameHistoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGameHistory>
          }
          groupBy: {
            args: Prisma.gameHistoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GameHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.gameHistoryCountArgs<ExtArgs>,
            result: $Utils.Optional<GameHistoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    message: number
    channelUser: number
    friends: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    message?: boolean | UserCountOutputTypeCountMessageArgs
    channelUser?: boolean | UserCountOutputTypeCountChannelUserArgs
    friends?: boolean | UserCountOutputTypeCountFriendsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelMessageWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChannelUserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelUserWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFriendsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FriendsWhereInput
  }



  /**
   * Count Type AvatarCountOutputType
   */

  export type AvatarCountOutputType = {
    User: number
  }

  export type AvatarCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User?: boolean | AvatarCountOutputTypeCountUserArgs
  }

  // Custom InputTypes

  /**
   * AvatarCountOutputType without action
   */
  export type AvatarCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AvatarCountOutputType
     */
    select?: AvatarCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AvatarCountOutputType without action
   */
  export type AvatarCountOutputTypeCountUserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }



  /**
   * Count Type ChannelCountOutputType
   */

  export type ChannelCountOutputType = {
    messages: number
    channelUsers: number
  }

  export type ChannelCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean | ChannelCountOutputTypeCountMessagesArgs
    channelUsers?: boolean | ChannelCountOutputTypeCountChannelUsersArgs
  }

  // Custom InputTypes

  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelCountOutputType
     */
    select?: ChannelCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelMessageWhereInput
  }


  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeCountChannelUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelUserWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    gamesWon: number | null
    gamesLost: number | null
    score: number | null
    avatarId: number | null
    blockedIds: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    gamesWon: number | null
    gamesLost: number | null
    score: number | null
    avatarId: number | null
    blockedIds: number[]
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    username: string | null
    isLogged: boolean | null
    inChat: boolean | null
    inGame: boolean | null
    gamesWon: number | null
    gamesLost: number | null
    score: number | null
    userSecret: string | null
    avatarId: number | null
    IstwoFactorAuth: boolean | null
    IsSigninWith42: boolean | null
    hash: string | null
    hashedRt: string | null
    achievementChat: boolean | null
    achievementPong: boolean | null
    achievementAvatar: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    email: string | null
    username: string | null
    isLogged: boolean | null
    inChat: boolean | null
    inGame: boolean | null
    gamesWon: number | null
    gamesLost: number | null
    score: number | null
    userSecret: string | null
    avatarId: number | null
    IstwoFactorAuth: boolean | null
    IsSigninWith42: boolean | null
    hash: string | null
    hashedRt: string | null
    achievementChat: boolean | null
    achievementPong: boolean | null
    achievementAvatar: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    email: number
    username: number
    isLogged: number
    inChat: number
    inGame: number
    gamesWon: number
    gamesLost: number
    score: number
    userSecret: number
    avatarId: number
    IstwoFactorAuth: number
    IsSigninWith42: number
    hash: number
    hashedRt: number
    blockedIds: number
    achievementChat: number
    achievementPong: number
    achievementAvatar: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    gamesWon?: true
    gamesLost?: true
    score?: true
    avatarId?: true
    blockedIds?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    gamesWon?: true
    gamesLost?: true
    score?: true
    avatarId?: true
    blockedIds?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    username?: true
    isLogged?: true
    inChat?: true
    inGame?: true
    gamesWon?: true
    gamesLost?: true
    score?: true
    userSecret?: true
    avatarId?: true
    IstwoFactorAuth?: true
    IsSigninWith42?: true
    hash?: true
    hashedRt?: true
    achievementChat?: true
    achievementPong?: true
    achievementAvatar?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    username?: true
    isLogged?: true
    inChat?: true
    inGame?: true
    gamesWon?: true
    gamesLost?: true
    score?: true
    userSecret?: true
    avatarId?: true
    IstwoFactorAuth?: true
    IsSigninWith42?: true
    hash?: true
    hashedRt?: true
    achievementChat?: true
    achievementPong?: true
    achievementAvatar?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    email?: true
    username?: true
    isLogged?: true
    inChat?: true
    inGame?: true
    gamesWon?: true
    gamesLost?: true
    score?: true
    userSecret?: true
    avatarId?: true
    IstwoFactorAuth?: true
    IsSigninWith42?: true
    hash?: true
    hashedRt?: true
    blockedIds?: true
    achievementChat?: true
    achievementPong?: true
    achievementAvatar?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon: number
    gamesLost: number
    score: number
    userSecret: string | null
    avatarId: number | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash: string | null
    hashedRt: string | null
    blockedIds: number[]
    achievementChat: boolean
    achievementPong: boolean
    achievementAvatar: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    username?: boolean
    isLogged?: boolean
    inChat?: boolean
    inGame?: boolean
    gamesWon?: boolean
    gamesLost?: boolean
    score?: boolean
    userSecret?: boolean
    avatarId?: boolean
    IstwoFactorAuth?: boolean
    IsSigninWith42?: boolean
    hash?: boolean
    hashedRt?: boolean
    blockedIds?: boolean
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
    avatar?: boolean | User$avatarArgs<ExtArgs>
    message?: boolean | User$messageArgs<ExtArgs>
    channelUser?: boolean | User$channelUserArgs<ExtArgs>
    friends?: boolean | User$friendsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean
    username?: boolean
    isLogged?: boolean
    inChat?: boolean
    inGame?: boolean
    gamesWon?: boolean
    gamesLost?: boolean
    score?: boolean
    userSecret?: boolean
    avatarId?: boolean
    IstwoFactorAuth?: boolean
    IsSigninWith42?: boolean
    hash?: boolean
    hashedRt?: boolean
    blockedIds?: boolean
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    avatar?: boolean | User$avatarArgs<ExtArgs>
    message?: boolean | User$messageArgs<ExtArgs>
    channelUser?: boolean | User$channelUserArgs<ExtArgs>
    friends?: boolean | User$friendsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      avatar: Prisma.$AvatarPayload<ExtArgs> | null
      message: Prisma.$ChannelMessagePayload<ExtArgs>[]
      channelUser: Prisma.$ChannelUserPayload<ExtArgs>[]
      friends: Prisma.$FriendsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      email: string
      username: string
      isLogged: boolean
      inChat: boolean
      inGame: boolean
      gamesWon: number
      gamesLost: number
      score: number
      userSecret: string | null
      avatarId: number | null
      IstwoFactorAuth: boolean
      IsSigninWith42: boolean
      hash: string | null
      hashedRt: string | null
      blockedIds: number[]
      achievementChat: boolean
      achievementPong: boolean
      achievementAvatar: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    avatar<T extends User$avatarArgs<ExtArgs> = {}>(args?: Subset<T, User$avatarArgs<ExtArgs>>): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    message<T extends User$messageArgs<ExtArgs> = {}>(args?: Subset<T, User$messageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelMessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    channelUser<T extends User$channelUserArgs<ExtArgs> = {}>(args?: Subset<T, User$channelUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelUserPayload<ExtArgs>, T, 'findMany'> | Null>;

    friends<T extends User$friendsArgs<ExtArgs> = {}>(args?: Subset<T, User$friendsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly isLogged: FieldRef<"User", 'Boolean'>
    readonly inChat: FieldRef<"User", 'Boolean'>
    readonly inGame: FieldRef<"User", 'Boolean'>
    readonly gamesWon: FieldRef<"User", 'Int'>
    readonly gamesLost: FieldRef<"User", 'Int'>
    readonly score: FieldRef<"User", 'Int'>
    readonly userSecret: FieldRef<"User", 'String'>
    readonly avatarId: FieldRef<"User", 'Int'>
    readonly IstwoFactorAuth: FieldRef<"User", 'Boolean'>
    readonly IsSigninWith42: FieldRef<"User", 'Boolean'>
    readonly hash: FieldRef<"User", 'String'>
    readonly hashedRt: FieldRef<"User", 'String'>
    readonly blockedIds: FieldRef<"User", 'Int[]'>
    readonly achievementChat: FieldRef<"User", 'Boolean'>
    readonly achievementPong: FieldRef<"User", 'Boolean'>
    readonly achievementAvatar: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.avatar
   */
  export type User$avatarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude<ExtArgs> | null
    where?: AvatarWhereInput
  }


  /**
   * User.message
   */
  export type User$messageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMessage
     */
    select?: ChannelMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMessageInclude<ExtArgs> | null
    where?: ChannelMessageWhereInput
    orderBy?: ChannelMessageOrderByWithRelationInput | ChannelMessageOrderByWithRelationInput[]
    cursor?: ChannelMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChannelMessageScalarFieldEnum | ChannelMessageScalarFieldEnum[]
  }


  /**
   * User.channelUser
   */
  export type User$channelUserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelUser
     */
    select?: ChannelUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelUserInclude<ExtArgs> | null
    where?: ChannelUserWhereInput
    orderBy?: ChannelUserOrderByWithRelationInput | ChannelUserOrderByWithRelationInput[]
    cursor?: ChannelUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChannelUserScalarFieldEnum | ChannelUserScalarFieldEnum[]
  }


  /**
   * User.friends
   */
  export type User$friendsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude<ExtArgs> | null
    where?: FriendsWhereInput
    orderBy?: FriendsOrderByWithRelationInput | FriendsOrderByWithRelationInput[]
    cursor?: FriendsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FriendsScalarFieldEnum | FriendsScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Friends
   */

  export type AggregateFriends = {
    _count: FriendsCountAggregateOutputType | null
    _avg: FriendsAvgAggregateOutputType | null
    _sum: FriendsSumAggregateOutputType | null
    _min: FriendsMinAggregateOutputType | null
    _max: FriendsMaxAggregateOutputType | null
  }

  export type FriendsAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    friendId: number | null
  }

  export type FriendsSumAggregateOutputType = {
    id: number | null
    userId: number | null
    friendId: number | null
  }

  export type FriendsMinAggregateOutputType = {
    id: number | null
    userId: number | null
    friendId: number | null
  }

  export type FriendsMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    friendId: number | null
  }

  export type FriendsCountAggregateOutputType = {
    id: number
    userId: number
    friendId: number
    _all: number
  }


  export type FriendsAvgAggregateInputType = {
    id?: true
    userId?: true
    friendId?: true
  }

  export type FriendsSumAggregateInputType = {
    id?: true
    userId?: true
    friendId?: true
  }

  export type FriendsMinAggregateInputType = {
    id?: true
    userId?: true
    friendId?: true
  }

  export type FriendsMaxAggregateInputType = {
    id?: true
    userId?: true
    friendId?: true
  }

  export type FriendsCountAggregateInputType = {
    id?: true
    userId?: true
    friendId?: true
    _all?: true
  }

  export type FriendsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Friends to aggregate.
     */
    where?: FriendsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friends to fetch.
     */
    orderBy?: FriendsOrderByWithRelationInput | FriendsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Friends
    **/
    _count?: true | FriendsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FriendsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FriendsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendsMaxAggregateInputType
  }

  export type GetFriendsAggregateType<T extends FriendsAggregateArgs> = {
        [P in keyof T & keyof AggregateFriends]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriends[P]>
      : GetScalarType<T[P], AggregateFriends[P]>
  }




  export type FriendsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FriendsWhereInput
    orderBy?: FriendsOrderByWithAggregationInput | FriendsOrderByWithAggregationInput[]
    by: FriendsScalarFieldEnum[] | FriendsScalarFieldEnum
    having?: FriendsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendsCountAggregateInputType | true
    _avg?: FriendsAvgAggregateInputType
    _sum?: FriendsSumAggregateInputType
    _min?: FriendsMinAggregateInputType
    _max?: FriendsMaxAggregateInputType
  }

  export type FriendsGroupByOutputType = {
    id: number
    userId: number
    friendId: number
    _count: FriendsCountAggregateOutputType | null
    _avg: FriendsAvgAggregateOutputType | null
    _sum: FriendsSumAggregateOutputType | null
    _min: FriendsMinAggregateOutputType | null
    _max: FriendsMaxAggregateOutputType | null
  }

  type GetFriendsGroupByPayload<T extends FriendsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FriendsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendsGroupByOutputType[P]>
            : GetScalarType<T[P], FriendsGroupByOutputType[P]>
        }
      >
    >


  export type FriendsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    friendId?: boolean
    User?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["friends"]>

  export type FriendsSelectScalar = {
    id?: boolean
    userId?: boolean
    friendId?: boolean
  }

  export type FriendsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $FriendsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Friends"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      userId: number
      friendId: number
    }, ExtArgs["result"]["friends"]>
    composites: {}
  }


  type FriendsGetPayload<S extends boolean | null | undefined | FriendsDefaultArgs> = $Result.GetResult<Prisma.$FriendsPayload, S>

  type FriendsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FriendsFindManyArgs, 'select' | 'include'> & {
      select?: FriendsCountAggregateInputType | true
    }

  export interface FriendsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Friends'], meta: { name: 'Friends' } }
    /**
     * Find zero or one Friends that matches the filter.
     * @param {FriendsFindUniqueArgs} args - Arguments to find a Friends
     * @example
     * // Get one Friends
     * const friends = await prisma.friends.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FriendsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FriendsFindUniqueArgs<ExtArgs>>
    ): Prisma__FriendsClient<$Result.GetResult<Prisma.$FriendsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Friends that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FriendsFindUniqueOrThrowArgs} args - Arguments to find a Friends
     * @example
     * // Get one Friends
     * const friends = await prisma.friends.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FriendsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FriendsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FriendsClient<$Result.GetResult<Prisma.$FriendsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Friends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsFindFirstArgs} args - Arguments to find a Friends
     * @example
     * // Get one Friends
     * const friends = await prisma.friends.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FriendsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FriendsFindFirstArgs<ExtArgs>>
    ): Prisma__FriendsClient<$Result.GetResult<Prisma.$FriendsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Friends that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsFindFirstOrThrowArgs} args - Arguments to find a Friends
     * @example
     * // Get one Friends
     * const friends = await prisma.friends.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FriendsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FriendsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FriendsClient<$Result.GetResult<Prisma.$FriendsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Friends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friends
     * const friends = await prisma.friends.findMany()
     * 
     * // Get first 10 Friends
     * const friends = await prisma.friends.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const friendsWithIdOnly = await prisma.friends.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FriendsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FriendsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FriendsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Friends.
     * @param {FriendsCreateArgs} args - Arguments to create a Friends.
     * @example
     * // Create one Friends
     * const Friends = await prisma.friends.create({
     *   data: {
     *     // ... data to create a Friends
     *   }
     * })
     * 
    **/
    create<T extends FriendsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FriendsCreateArgs<ExtArgs>>
    ): Prisma__FriendsClient<$Result.GetResult<Prisma.$FriendsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Friends.
     *     @param {FriendsCreateManyArgs} args - Arguments to create many Friends.
     *     @example
     *     // Create many Friends
     *     const friends = await prisma.friends.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FriendsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FriendsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Friends.
     * @param {FriendsDeleteArgs} args - Arguments to delete one Friends.
     * @example
     * // Delete one Friends
     * const Friends = await prisma.friends.delete({
     *   where: {
     *     // ... filter to delete one Friends
     *   }
     * })
     * 
    **/
    delete<T extends FriendsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FriendsDeleteArgs<ExtArgs>>
    ): Prisma__FriendsClient<$Result.GetResult<Prisma.$FriendsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Friends.
     * @param {FriendsUpdateArgs} args - Arguments to update one Friends.
     * @example
     * // Update one Friends
     * const friends = await prisma.friends.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FriendsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FriendsUpdateArgs<ExtArgs>>
    ): Prisma__FriendsClient<$Result.GetResult<Prisma.$FriendsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Friends.
     * @param {FriendsDeleteManyArgs} args - Arguments to filter Friends to delete.
     * @example
     * // Delete a few Friends
     * const { count } = await prisma.friends.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FriendsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FriendsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friends
     * const friends = await prisma.friends.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FriendsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FriendsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Friends.
     * @param {FriendsUpsertArgs} args - Arguments to update or create a Friends.
     * @example
     * // Update or create a Friends
     * const friends = await prisma.friends.upsert({
     *   create: {
     *     // ... data to create a Friends
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friends we want to update
     *   }
     * })
    **/
    upsert<T extends FriendsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FriendsUpsertArgs<ExtArgs>>
    ): Prisma__FriendsClient<$Result.GetResult<Prisma.$FriendsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Friends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsCountArgs} args - Arguments to filter Friends to count.
     * @example
     * // Count the number of Friends
     * const count = await prisma.friends.count({
     *   where: {
     *     // ... the filter for the Friends we want to count
     *   }
     * })
    **/
    count<T extends FriendsCountArgs>(
      args?: Subset<T, FriendsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendsAggregateArgs>(args: Subset<T, FriendsAggregateArgs>): Prisma.PrismaPromise<GetFriendsAggregateType<T>>

    /**
     * Group by Friends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendsGroupByArgs['orderBy'] }
        : { orderBy?: FriendsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Friends model
   */
  readonly fields: FriendsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Friends.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FriendsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Friends model
   */ 
  interface FriendsFieldRefs {
    readonly id: FieldRef<"Friends", 'Int'>
    readonly userId: FieldRef<"Friends", 'Int'>
    readonly friendId: FieldRef<"Friends", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Friends findUnique
   */
  export type FriendsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude<ExtArgs> | null
    /**
     * Filter, which Friends to fetch.
     */
    where: FriendsWhereUniqueInput
  }


  /**
   * Friends findUniqueOrThrow
   */
  export type FriendsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude<ExtArgs> | null
    /**
     * Filter, which Friends to fetch.
     */
    where: FriendsWhereUniqueInput
  }


  /**
   * Friends findFirst
   */
  export type FriendsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude<ExtArgs> | null
    /**
     * Filter, which Friends to fetch.
     */
    where?: FriendsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friends to fetch.
     */
    orderBy?: FriendsOrderByWithRelationInput | FriendsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friends.
     */
    cursor?: FriendsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friends.
     */
    distinct?: FriendsScalarFieldEnum | FriendsScalarFieldEnum[]
  }


  /**
   * Friends findFirstOrThrow
   */
  export type FriendsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude<ExtArgs> | null
    /**
     * Filter, which Friends to fetch.
     */
    where?: FriendsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friends to fetch.
     */
    orderBy?: FriendsOrderByWithRelationInput | FriendsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friends.
     */
    cursor?: FriendsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friends.
     */
    distinct?: FriendsScalarFieldEnum | FriendsScalarFieldEnum[]
  }


  /**
   * Friends findMany
   */
  export type FriendsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude<ExtArgs> | null
    /**
     * Filter, which Friends to fetch.
     */
    where?: FriendsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friends to fetch.
     */
    orderBy?: FriendsOrderByWithRelationInput | FriendsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Friends.
     */
    cursor?: FriendsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friends.
     */
    skip?: number
    distinct?: FriendsScalarFieldEnum | FriendsScalarFieldEnum[]
  }


  /**
   * Friends create
   */
  export type FriendsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude<ExtArgs> | null
    /**
     * The data needed to create a Friends.
     */
    data: XOR<FriendsCreateInput, FriendsUncheckedCreateInput>
  }


  /**
   * Friends createMany
   */
  export type FriendsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Friends.
     */
    data: FriendsCreateManyInput | FriendsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Friends update
   */
  export type FriendsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude<ExtArgs> | null
    /**
     * The data needed to update a Friends.
     */
    data: XOR<FriendsUpdateInput, FriendsUncheckedUpdateInput>
    /**
     * Choose, which Friends to update.
     */
    where: FriendsWhereUniqueInput
  }


  /**
   * Friends updateMany
   */
  export type FriendsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Friends.
     */
    data: XOR<FriendsUpdateManyMutationInput, FriendsUncheckedUpdateManyInput>
    /**
     * Filter which Friends to update
     */
    where?: FriendsWhereInput
  }


  /**
   * Friends upsert
   */
  export type FriendsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude<ExtArgs> | null
    /**
     * The filter to search for the Friends to update in case it exists.
     */
    where: FriendsWhereUniqueInput
    /**
     * In case the Friends found by the `where` argument doesn't exist, create a new Friends with this data.
     */
    create: XOR<FriendsCreateInput, FriendsUncheckedCreateInput>
    /**
     * In case the Friends was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendsUpdateInput, FriendsUncheckedUpdateInput>
  }


  /**
   * Friends delete
   */
  export type FriendsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude<ExtArgs> | null
    /**
     * Filter which Friends to delete.
     */
    where: FriendsWhereUniqueInput
  }


  /**
   * Friends deleteMany
   */
  export type FriendsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Friends to delete
     */
    where?: FriendsWhereInput
  }


  /**
   * Friends without action
   */
  export type FriendsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude<ExtArgs> | null
  }



  /**
   * Model Avatar
   */

  export type AggregateAvatar = {
    _count: AvatarCountAggregateOutputType | null
    _avg: AvatarAvgAggregateOutputType | null
    _sum: AvatarSumAggregateOutputType | null
    _min: AvatarMinAggregateOutputType | null
    _max: AvatarMaxAggregateOutputType | null
  }

  export type AvatarAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AvatarSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AvatarMinAggregateOutputType = {
    id: number | null
    filename: string | null
    data: Buffer | null
    userId: number | null
    url42: string | null
  }

  export type AvatarMaxAggregateOutputType = {
    id: number | null
    filename: string | null
    data: Buffer | null
    userId: number | null
    url42: string | null
  }

  export type AvatarCountAggregateOutputType = {
    id: number
    filename: number
    data: number
    userId: number
    url42: number
    _all: number
  }


  export type AvatarAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AvatarSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AvatarMinAggregateInputType = {
    id?: true
    filename?: true
    data?: true
    userId?: true
    url42?: true
  }

  export type AvatarMaxAggregateInputType = {
    id?: true
    filename?: true
    data?: true
    userId?: true
    url42?: true
  }

  export type AvatarCountAggregateInputType = {
    id?: true
    filename?: true
    data?: true
    userId?: true
    url42?: true
    _all?: true
  }

  export type AvatarAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Avatar to aggregate.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: AvatarOrderByWithRelationInput | AvatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Avatars
    **/
    _count?: true | AvatarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvatarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvatarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvatarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvatarMaxAggregateInputType
  }

  export type GetAvatarAggregateType<T extends AvatarAggregateArgs> = {
        [P in keyof T & keyof AggregateAvatar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvatar[P]>
      : GetScalarType<T[P], AggregateAvatar[P]>
  }




  export type AvatarGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AvatarWhereInput
    orderBy?: AvatarOrderByWithAggregationInput | AvatarOrderByWithAggregationInput[]
    by: AvatarScalarFieldEnum[] | AvatarScalarFieldEnum
    having?: AvatarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvatarCountAggregateInputType | true
    _avg?: AvatarAvgAggregateInputType
    _sum?: AvatarSumAggregateInputType
    _min?: AvatarMinAggregateInputType
    _max?: AvatarMaxAggregateInputType
  }

  export type AvatarGroupByOutputType = {
    id: number
    filename: string
    data: Buffer
    userId: number
    url42: string | null
    _count: AvatarCountAggregateOutputType | null
    _avg: AvatarAvgAggregateOutputType | null
    _sum: AvatarSumAggregateOutputType | null
    _min: AvatarMinAggregateOutputType | null
    _max: AvatarMaxAggregateOutputType | null
  }

  type GetAvatarGroupByPayload<T extends AvatarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AvatarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvatarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvatarGroupByOutputType[P]>
            : GetScalarType<T[P], AvatarGroupByOutputType[P]>
        }
      >
    >


  export type AvatarSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    data?: boolean
    userId?: boolean
    url42?: boolean
    User?: boolean | Avatar$UserArgs<ExtArgs>
    _count?: boolean | AvatarCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["avatar"]>

  export type AvatarSelectScalar = {
    id?: boolean
    filename?: boolean
    data?: boolean
    userId?: boolean
    url42?: boolean
  }

  export type AvatarInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    User?: boolean | Avatar$UserArgs<ExtArgs>
    _count?: boolean | AvatarCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AvatarPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Avatar"
    objects: {
      User: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      filename: string
      data: Buffer
      userId: number
      url42: string | null
    }, ExtArgs["result"]["avatar"]>
    composites: {}
  }


  type AvatarGetPayload<S extends boolean | null | undefined | AvatarDefaultArgs> = $Result.GetResult<Prisma.$AvatarPayload, S>

  type AvatarCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AvatarFindManyArgs, 'select' | 'include'> & {
      select?: AvatarCountAggregateInputType | true
    }

  export interface AvatarDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Avatar'], meta: { name: 'Avatar' } }
    /**
     * Find zero or one Avatar that matches the filter.
     * @param {AvatarFindUniqueArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AvatarFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AvatarFindUniqueArgs<ExtArgs>>
    ): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Avatar that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AvatarFindUniqueOrThrowArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AvatarFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AvatarFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Avatar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarFindFirstArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AvatarFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AvatarFindFirstArgs<ExtArgs>>
    ): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Avatar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarFindFirstOrThrowArgs} args - Arguments to find a Avatar
     * @example
     * // Get one Avatar
     * const avatar = await prisma.avatar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AvatarFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AvatarFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Avatars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Avatars
     * const avatars = await prisma.avatar.findMany()
     * 
     * // Get first 10 Avatars
     * const avatars = await prisma.avatar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const avatarWithIdOnly = await prisma.avatar.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AvatarFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AvatarFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Avatar.
     * @param {AvatarCreateArgs} args - Arguments to create a Avatar.
     * @example
     * // Create one Avatar
     * const Avatar = await prisma.avatar.create({
     *   data: {
     *     // ... data to create a Avatar
     *   }
     * })
     * 
    **/
    create<T extends AvatarCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AvatarCreateArgs<ExtArgs>>
    ): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Avatars.
     *     @param {AvatarCreateManyArgs} args - Arguments to create many Avatars.
     *     @example
     *     // Create many Avatars
     *     const avatar = await prisma.avatar.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AvatarCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AvatarCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Avatar.
     * @param {AvatarDeleteArgs} args - Arguments to delete one Avatar.
     * @example
     * // Delete one Avatar
     * const Avatar = await prisma.avatar.delete({
     *   where: {
     *     // ... filter to delete one Avatar
     *   }
     * })
     * 
    **/
    delete<T extends AvatarDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AvatarDeleteArgs<ExtArgs>>
    ): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Avatar.
     * @param {AvatarUpdateArgs} args - Arguments to update one Avatar.
     * @example
     * // Update one Avatar
     * const avatar = await prisma.avatar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AvatarUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AvatarUpdateArgs<ExtArgs>>
    ): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Avatars.
     * @param {AvatarDeleteManyArgs} args - Arguments to filter Avatars to delete.
     * @example
     * // Delete a few Avatars
     * const { count } = await prisma.avatar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AvatarDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AvatarDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avatars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Avatars
     * const avatar = await prisma.avatar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AvatarUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AvatarUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Avatar.
     * @param {AvatarUpsertArgs} args - Arguments to update or create a Avatar.
     * @example
     * // Update or create a Avatar
     * const avatar = await prisma.avatar.upsert({
     *   create: {
     *     // ... data to create a Avatar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Avatar we want to update
     *   }
     * })
    **/
    upsert<T extends AvatarUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AvatarUpsertArgs<ExtArgs>>
    ): Prisma__AvatarClient<$Result.GetResult<Prisma.$AvatarPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Avatars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarCountArgs} args - Arguments to filter Avatars to count.
     * @example
     * // Count the number of Avatars
     * const count = await prisma.avatar.count({
     *   where: {
     *     // ... the filter for the Avatars we want to count
     *   }
     * })
    **/
    count<T extends AvatarCountArgs>(
      args?: Subset<T, AvatarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvatarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Avatar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvatarAggregateArgs>(args: Subset<T, AvatarAggregateArgs>): Prisma.PrismaPromise<GetAvatarAggregateType<T>>

    /**
     * Group by Avatar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvatarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AvatarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AvatarGroupByArgs['orderBy'] }
        : { orderBy?: AvatarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AvatarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvatarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Avatar model
   */
  readonly fields: AvatarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Avatar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AvatarClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    User<T extends Avatar$UserArgs<ExtArgs> = {}>(args?: Subset<T, Avatar$UserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Avatar model
   */ 
  interface AvatarFieldRefs {
    readonly id: FieldRef<"Avatar", 'Int'>
    readonly filename: FieldRef<"Avatar", 'String'>
    readonly data: FieldRef<"Avatar", 'Bytes'>
    readonly userId: FieldRef<"Avatar", 'Int'>
    readonly url42: FieldRef<"Avatar", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Avatar findUnique
   */
  export type AvatarFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatar to fetch.
     */
    where: AvatarWhereUniqueInput
  }


  /**
   * Avatar findUniqueOrThrow
   */
  export type AvatarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatar to fetch.
     */
    where: AvatarWhereUniqueInput
  }


  /**
   * Avatar findFirst
   */
  export type AvatarFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatar to fetch.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: AvatarOrderByWithRelationInput | AvatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Avatars.
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Avatars.
     */
    distinct?: AvatarScalarFieldEnum | AvatarScalarFieldEnum[]
  }


  /**
   * Avatar findFirstOrThrow
   */
  export type AvatarFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatar to fetch.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: AvatarOrderByWithRelationInput | AvatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Avatars.
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Avatars.
     */
    distinct?: AvatarScalarFieldEnum | AvatarScalarFieldEnum[]
  }


  /**
   * Avatar findMany
   */
  export type AvatarFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter, which Avatars to fetch.
     */
    where?: AvatarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avatars to fetch.
     */
    orderBy?: AvatarOrderByWithRelationInput | AvatarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Avatars.
     */
    cursor?: AvatarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avatars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avatars.
     */
    skip?: number
    distinct?: AvatarScalarFieldEnum | AvatarScalarFieldEnum[]
  }


  /**
   * Avatar create
   */
  export type AvatarCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * The data needed to create a Avatar.
     */
    data: XOR<AvatarCreateInput, AvatarUncheckedCreateInput>
  }


  /**
   * Avatar createMany
   */
  export type AvatarCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Avatars.
     */
    data: AvatarCreateManyInput | AvatarCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Avatar update
   */
  export type AvatarUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * The data needed to update a Avatar.
     */
    data: XOR<AvatarUpdateInput, AvatarUncheckedUpdateInput>
    /**
     * Choose, which Avatar to update.
     */
    where: AvatarWhereUniqueInput
  }


  /**
   * Avatar updateMany
   */
  export type AvatarUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Avatars.
     */
    data: XOR<AvatarUpdateManyMutationInput, AvatarUncheckedUpdateManyInput>
    /**
     * Filter which Avatars to update
     */
    where?: AvatarWhereInput
  }


  /**
   * Avatar upsert
   */
  export type AvatarUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * The filter to search for the Avatar to update in case it exists.
     */
    where: AvatarWhereUniqueInput
    /**
     * In case the Avatar found by the `where` argument doesn't exist, create a new Avatar with this data.
     */
    create: XOR<AvatarCreateInput, AvatarUncheckedCreateInput>
    /**
     * In case the Avatar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AvatarUpdateInput, AvatarUncheckedUpdateInput>
  }


  /**
   * Avatar delete
   */
  export type AvatarDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude<ExtArgs> | null
    /**
     * Filter which Avatar to delete.
     */
    where: AvatarWhereUniqueInput
  }


  /**
   * Avatar deleteMany
   */
  export type AvatarDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Avatars to delete
     */
    where?: AvatarWhereInput
  }


  /**
   * Avatar.User
   */
  export type Avatar$UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * Avatar without action
   */
  export type AvatarDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avatar
     */
    select?: AvatarSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvatarInclude<ExtArgs> | null
  }



  /**
   * Model Channel
   */

  export type AggregateChannel = {
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  export type ChannelAvgAggregateOutputType = {
    id: number | null
  }

  export type ChannelSumAggregateOutputType = {
    id: number | null
  }

  export type ChannelMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    password: string | null
    type: $Enums.ChannelType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChannelMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    password: string | null
    type: $Enums.ChannelType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChannelCountAggregateOutputType = {
    id: number
    name: number
    description: number
    password: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChannelAvgAggregateInputType = {
    id?: true
  }

  export type ChannelSumAggregateInputType = {
    id?: true
  }

  export type ChannelMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    password?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChannelMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    password?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChannelCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    password?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChannelAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Channel to aggregate.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Channels
    **/
    _count?: true | ChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelMaxAggregateInputType
  }

  export type GetChannelAggregateType<T extends ChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannel[P]>
      : GetScalarType<T[P], AggregateChannel[P]>
  }




  export type ChannelGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelWhereInput
    orderBy?: ChannelOrderByWithAggregationInput | ChannelOrderByWithAggregationInput[]
    by: ChannelScalarFieldEnum[] | ChannelScalarFieldEnum
    having?: ChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelCountAggregateInputType | true
    _avg?: ChannelAvgAggregateInputType
    _sum?: ChannelSumAggregateInputType
    _min?: ChannelMinAggregateInputType
    _max?: ChannelMaxAggregateInputType
  }

  export type ChannelGroupByOutputType = {
    id: number
    name: string | null
    description: string | null
    password: string | null
    type: $Enums.ChannelType
    createdAt: Date
    updatedAt: Date
    _count: ChannelCountAggregateOutputType | null
    _avg: ChannelAvgAggregateOutputType | null
    _sum: ChannelSumAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  type GetChannelGroupByPayload<T extends ChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelGroupByOutputType[P]>
        }
      >
    >


  export type ChannelSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    password?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    messages?: boolean | Channel$messagesArgs<ExtArgs>
    channelUsers?: boolean | Channel$channelUsersArgs<ExtArgs>
    _count?: boolean | ChannelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["channel"]>

  export type ChannelSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    password?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ChannelInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    messages?: boolean | Channel$messagesArgs<ExtArgs>
    channelUsers?: boolean | Channel$channelUsersArgs<ExtArgs>
    _count?: boolean | ChannelCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ChannelPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Channel"
    objects: {
      messages: Prisma.$ChannelMessagePayload<ExtArgs>[]
      channelUsers: Prisma.$ChannelUserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      name: string | null
      description: string | null
      password: string | null
      type: $Enums.ChannelType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["channel"]>
    composites: {}
  }


  type ChannelGetPayload<S extends boolean | null | undefined | ChannelDefaultArgs> = $Result.GetResult<Prisma.$ChannelPayload, S>

  type ChannelCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChannelFindManyArgs, 'select' | 'include'> & {
      select?: ChannelCountAggregateInputType | true
    }

  export interface ChannelDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Channel'], meta: { name: 'Channel' } }
    /**
     * Find zero or one Channel that matches the filter.
     * @param {ChannelFindUniqueArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelFindUniqueArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Channel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelFindUniqueOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Channel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindFirstArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Channel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channel.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelWithIdOnly = await prisma.channel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Channel.
     * @param {ChannelCreateArgs} args - Arguments to create a Channel.
     * @example
     * // Create one Channel
     * const Channel = await prisma.channel.create({
     *   data: {
     *     // ... data to create a Channel
     *   }
     * })
     * 
    **/
    create<T extends ChannelCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelCreateArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Channels.
     *     @param {ChannelCreateManyArgs} args - Arguments to create many Channels.
     *     @example
     *     // Create many Channels
     *     const channel = await prisma.channel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channel.
     * @param {ChannelDeleteArgs} args - Arguments to delete one Channel.
     * @example
     * // Delete one Channel
     * const Channel = await prisma.channel.delete({
     *   where: {
     *     // ... filter to delete one Channel
     *   }
     * })
     * 
    **/
    delete<T extends ChannelDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelDeleteArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Channel.
     * @param {ChannelUpdateArgs} args - Arguments to update one Channel.
     * @example
     * // Update one Channel
     * const channel = await prisma.channel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpdateArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Channels.
     * @param {ChannelDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channel = await prisma.channel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channel.
     * @param {ChannelUpsertArgs} args - Arguments to update or create a Channel.
     * @example
     * // Update or create a Channel
     * const channel = await prisma.channel.upsert({
     *   create: {
     *     // ... data to create a Channel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channel we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUpsertArgs<ExtArgs>>
    ): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channel.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends ChannelCountArgs>(
      args?: Subset<T, ChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelAggregateArgs>(args: Subset<T, ChannelAggregateArgs>): Prisma.PrismaPromise<GetChannelAggregateType<T>>

    /**
     * Group by Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelGroupByArgs['orderBy'] }
        : { orderBy?: ChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Channel model
   */
  readonly fields: ChannelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Channel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChannelClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    messages<T extends Channel$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Channel$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelMessagePayload<ExtArgs>, T, 'findMany'> | Null>;

    channelUsers<T extends Channel$channelUsersArgs<ExtArgs> = {}>(args?: Subset<T, Channel$channelUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelUserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Channel model
   */ 
  interface ChannelFieldRefs {
    readonly id: FieldRef<"Channel", 'Int'>
    readonly name: FieldRef<"Channel", 'String'>
    readonly description: FieldRef<"Channel", 'String'>
    readonly password: FieldRef<"Channel", 'String'>
    readonly type: FieldRef<"Channel", 'ChannelType'>
    readonly createdAt: FieldRef<"Channel", 'DateTime'>
    readonly updatedAt: FieldRef<"Channel", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Channel findUnique
   */
  export type ChannelFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel findUniqueOrThrow
   */
  export type ChannelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel findFirst
   */
  export type ChannelFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel findFirstOrThrow
   */
  export type ChannelFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel findMany
   */
  export type ChannelFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter, which Channels to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: ChannelOrderByWithRelationInput | ChannelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    distinct?: ChannelScalarFieldEnum | ChannelScalarFieldEnum[]
  }


  /**
   * Channel create
   */
  export type ChannelCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The data needed to create a Channel.
     */
    data: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
  }


  /**
   * Channel createMany
   */
  export type ChannelCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Channels.
     */
    data: ChannelCreateManyInput | ChannelCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Channel update
   */
  export type ChannelUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The data needed to update a Channel.
     */
    data: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
    /**
     * Choose, which Channel to update.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel updateMany
   */
  export type ChannelUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Channels.
     */
    data: XOR<ChannelUpdateManyMutationInput, ChannelUncheckedUpdateManyInput>
    /**
     * Filter which Channels to update
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel upsert
   */
  export type ChannelUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * The filter to search for the Channel to update in case it exists.
     */
    where: ChannelWhereUniqueInput
    /**
     * In case the Channel found by the `where` argument doesn't exist, create a new Channel with this data.
     */
    create: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
    /**
     * In case the Channel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
  }


  /**
   * Channel delete
   */
  export type ChannelDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
    /**
     * Filter which Channel to delete.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel deleteMany
   */
  export type ChannelDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Channels to delete
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel.messages
   */
  export type Channel$messagesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMessage
     */
    select?: ChannelMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMessageInclude<ExtArgs> | null
    where?: ChannelMessageWhereInput
    orderBy?: ChannelMessageOrderByWithRelationInput | ChannelMessageOrderByWithRelationInput[]
    cursor?: ChannelMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChannelMessageScalarFieldEnum | ChannelMessageScalarFieldEnum[]
  }


  /**
   * Channel.channelUsers
   */
  export type Channel$channelUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelUser
     */
    select?: ChannelUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelUserInclude<ExtArgs> | null
    where?: ChannelUserWhereInput
    orderBy?: ChannelUserOrderByWithRelationInput | ChannelUserOrderByWithRelationInput[]
    cursor?: ChannelUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChannelUserScalarFieldEnum | ChannelUserScalarFieldEnum[]
  }


  /**
   * Channel without action
   */
  export type ChannelDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude<ExtArgs> | null
  }



  /**
   * Model ChannelUser
   */

  export type AggregateChannelUser = {
    _count: ChannelUserCountAggregateOutputType | null
    _avg: ChannelUserAvgAggregateOutputType | null
    _sum: ChannelUserSumAggregateOutputType | null
    _min: ChannelUserMinAggregateOutputType | null
    _max: ChannelUserMaxAggregateOutputType | null
  }

  export type ChannelUserAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
  }

  export type ChannelUserSumAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
  }

  export type ChannelUserMinAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
    role: $Enums.ChannelUserRole | null
  }

  export type ChannelUserMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
    role: $Enums.ChannelUserRole | null
  }

  export type ChannelUserCountAggregateOutputType = {
    id: number
    userId: number
    channelId: number
    role: number
    socketIds: number
    _all: number
  }


  export type ChannelUserAvgAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
  }

  export type ChannelUserSumAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
  }

  export type ChannelUserMinAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    role?: true
  }

  export type ChannelUserMaxAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    role?: true
  }

  export type ChannelUserCountAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    role?: true
    socketIds?: true
    _all?: true
  }

  export type ChannelUserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChannelUser to aggregate.
     */
    where?: ChannelUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelUsers to fetch.
     */
    orderBy?: ChannelUserOrderByWithRelationInput | ChannelUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChannelUsers
    **/
    _count?: true | ChannelUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelUserMaxAggregateInputType
  }

  export type GetChannelUserAggregateType<T extends ChannelUserAggregateArgs> = {
        [P in keyof T & keyof AggregateChannelUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannelUser[P]>
      : GetScalarType<T[P], AggregateChannelUser[P]>
  }




  export type ChannelUserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelUserWhereInput
    orderBy?: ChannelUserOrderByWithAggregationInput | ChannelUserOrderByWithAggregationInput[]
    by: ChannelUserScalarFieldEnum[] | ChannelUserScalarFieldEnum
    having?: ChannelUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelUserCountAggregateInputType | true
    _avg?: ChannelUserAvgAggregateInputType
    _sum?: ChannelUserSumAggregateInputType
    _min?: ChannelUserMinAggregateInputType
    _max?: ChannelUserMaxAggregateInputType
  }

  export type ChannelUserGroupByOutputType = {
    id: number
    userId: number
    channelId: number
    role: $Enums.ChannelUserRole
    socketIds: string[]
    _count: ChannelUserCountAggregateOutputType | null
    _avg: ChannelUserAvgAggregateOutputType | null
    _sum: ChannelUserSumAggregateOutputType | null
    _min: ChannelUserMinAggregateOutputType | null
    _max: ChannelUserMaxAggregateOutputType | null
  }

  type GetChannelUserGroupByPayload<T extends ChannelUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelUserGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelUserGroupByOutputType[P]>
        }
      >
    >


  export type ChannelUserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    channelId?: boolean
    role?: boolean
    socketIds?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["channelUser"]>

  export type ChannelUserSelectScalar = {
    id?: boolean
    userId?: boolean
    channelId?: boolean
    role?: boolean
    socketIds?: boolean
  }

  export type ChannelUserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
  }


  export type $ChannelUserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ChannelUser"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      channel: Prisma.$ChannelPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      userId: number
      channelId: number
      role: $Enums.ChannelUserRole
      socketIds: string[]
    }, ExtArgs["result"]["channelUser"]>
    composites: {}
  }


  type ChannelUserGetPayload<S extends boolean | null | undefined | ChannelUserDefaultArgs> = $Result.GetResult<Prisma.$ChannelUserPayload, S>

  type ChannelUserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChannelUserFindManyArgs, 'select' | 'include'> & {
      select?: ChannelUserCountAggregateInputType | true
    }

  export interface ChannelUserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChannelUser'], meta: { name: 'ChannelUser' } }
    /**
     * Find zero or one ChannelUser that matches the filter.
     * @param {ChannelUserFindUniqueArgs} args - Arguments to find a ChannelUser
     * @example
     * // Get one ChannelUser
     * const channelUser = await prisma.channelUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelUserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUserFindUniqueArgs<ExtArgs>>
    ): Prisma__ChannelUserClient<$Result.GetResult<Prisma.$ChannelUserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ChannelUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelUserFindUniqueOrThrowArgs} args - Arguments to find a ChannelUser
     * @example
     * // Get one ChannelUser
     * const channelUser = await prisma.channelUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelUserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelUserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelUserClient<$Result.GetResult<Prisma.$ChannelUserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ChannelUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUserFindFirstArgs} args - Arguments to find a ChannelUser
     * @example
     * // Get one ChannelUser
     * const channelUser = await prisma.channelUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelUserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelUserFindFirstArgs<ExtArgs>>
    ): Prisma__ChannelUserClient<$Result.GetResult<Prisma.$ChannelUserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ChannelUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUserFindFirstOrThrowArgs} args - Arguments to find a ChannelUser
     * @example
     * // Get one ChannelUser
     * const channelUser = await prisma.channelUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelUserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelUserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelUserClient<$Result.GetResult<Prisma.$ChannelUserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ChannelUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChannelUsers
     * const channelUsers = await prisma.channelUser.findMany()
     * 
     * // Get first 10 ChannelUsers
     * const channelUsers = await prisma.channelUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelUserWithIdOnly = await prisma.channelUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelUserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelUserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelUserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ChannelUser.
     * @param {ChannelUserCreateArgs} args - Arguments to create a ChannelUser.
     * @example
     * // Create one ChannelUser
     * const ChannelUser = await prisma.channelUser.create({
     *   data: {
     *     // ... data to create a ChannelUser
     *   }
     * })
     * 
    **/
    create<T extends ChannelUserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUserCreateArgs<ExtArgs>>
    ): Prisma__ChannelUserClient<$Result.GetResult<Prisma.$ChannelUserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ChannelUsers.
     *     @param {ChannelUserCreateManyArgs} args - Arguments to create many ChannelUsers.
     *     @example
     *     // Create many ChannelUsers
     *     const channelUser = await prisma.channelUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelUserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelUserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChannelUser.
     * @param {ChannelUserDeleteArgs} args - Arguments to delete one ChannelUser.
     * @example
     * // Delete one ChannelUser
     * const ChannelUser = await prisma.channelUser.delete({
     *   where: {
     *     // ... filter to delete one ChannelUser
     *   }
     * })
     * 
    **/
    delete<T extends ChannelUserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUserDeleteArgs<ExtArgs>>
    ): Prisma__ChannelUserClient<$Result.GetResult<Prisma.$ChannelUserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ChannelUser.
     * @param {ChannelUserUpdateArgs} args - Arguments to update one ChannelUser.
     * @example
     * // Update one ChannelUser
     * const channelUser = await prisma.channelUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelUserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUserUpdateArgs<ExtArgs>>
    ): Prisma__ChannelUserClient<$Result.GetResult<Prisma.$ChannelUserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ChannelUsers.
     * @param {ChannelUserDeleteManyArgs} args - Arguments to filter ChannelUsers to delete.
     * @example
     * // Delete a few ChannelUsers
     * const { count } = await prisma.channelUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelUserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelUserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChannelUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChannelUsers
     * const channelUser = await prisma.channelUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelUserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChannelUser.
     * @param {ChannelUserUpsertArgs} args - Arguments to update or create a ChannelUser.
     * @example
     * // Update or create a ChannelUser
     * const channelUser = await prisma.channelUser.upsert({
     *   create: {
     *     // ... data to create a ChannelUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChannelUser we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelUserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelUserUpsertArgs<ExtArgs>>
    ): Prisma__ChannelUserClient<$Result.GetResult<Prisma.$ChannelUserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ChannelUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUserCountArgs} args - Arguments to filter ChannelUsers to count.
     * @example
     * // Count the number of ChannelUsers
     * const count = await prisma.channelUser.count({
     *   where: {
     *     // ... the filter for the ChannelUsers we want to count
     *   }
     * })
    **/
    count<T extends ChannelUserCountArgs>(
      args?: Subset<T, ChannelUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChannelUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelUserAggregateArgs>(args: Subset<T, ChannelUserAggregateArgs>): Prisma.PrismaPromise<GetChannelUserAggregateType<T>>

    /**
     * Group by ChannelUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelUserGroupByArgs['orderBy'] }
        : { orderBy?: ChannelUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChannelUser model
   */
  readonly fields: ChannelUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChannelUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChannelUserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    channel<T extends ChannelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChannelDefaultArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ChannelUser model
   */ 
  interface ChannelUserFieldRefs {
    readonly id: FieldRef<"ChannelUser", 'Int'>
    readonly userId: FieldRef<"ChannelUser", 'Int'>
    readonly channelId: FieldRef<"ChannelUser", 'Int'>
    readonly role: FieldRef<"ChannelUser", 'ChannelUserRole'>
    readonly socketIds: FieldRef<"ChannelUser", 'String[]'>
  }
    

  // Custom InputTypes

  /**
   * ChannelUser findUnique
   */
  export type ChannelUserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelUser
     */
    select?: ChannelUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelUserInclude<ExtArgs> | null
    /**
     * Filter, which ChannelUser to fetch.
     */
    where: ChannelUserWhereUniqueInput
  }


  /**
   * ChannelUser findUniqueOrThrow
   */
  export type ChannelUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelUser
     */
    select?: ChannelUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelUserInclude<ExtArgs> | null
    /**
     * Filter, which ChannelUser to fetch.
     */
    where: ChannelUserWhereUniqueInput
  }


  /**
   * ChannelUser findFirst
   */
  export type ChannelUserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelUser
     */
    select?: ChannelUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelUserInclude<ExtArgs> | null
    /**
     * Filter, which ChannelUser to fetch.
     */
    where?: ChannelUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelUsers to fetch.
     */
    orderBy?: ChannelUserOrderByWithRelationInput | ChannelUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelUsers.
     */
    cursor?: ChannelUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelUsers.
     */
    distinct?: ChannelUserScalarFieldEnum | ChannelUserScalarFieldEnum[]
  }


  /**
   * ChannelUser findFirstOrThrow
   */
  export type ChannelUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelUser
     */
    select?: ChannelUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelUserInclude<ExtArgs> | null
    /**
     * Filter, which ChannelUser to fetch.
     */
    where?: ChannelUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelUsers to fetch.
     */
    orderBy?: ChannelUserOrderByWithRelationInput | ChannelUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelUsers.
     */
    cursor?: ChannelUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelUsers.
     */
    distinct?: ChannelUserScalarFieldEnum | ChannelUserScalarFieldEnum[]
  }


  /**
   * ChannelUser findMany
   */
  export type ChannelUserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelUser
     */
    select?: ChannelUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelUserInclude<ExtArgs> | null
    /**
     * Filter, which ChannelUsers to fetch.
     */
    where?: ChannelUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelUsers to fetch.
     */
    orderBy?: ChannelUserOrderByWithRelationInput | ChannelUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChannelUsers.
     */
    cursor?: ChannelUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelUsers.
     */
    skip?: number
    distinct?: ChannelUserScalarFieldEnum | ChannelUserScalarFieldEnum[]
  }


  /**
   * ChannelUser create
   */
  export type ChannelUserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelUser
     */
    select?: ChannelUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelUserInclude<ExtArgs> | null
    /**
     * The data needed to create a ChannelUser.
     */
    data: XOR<ChannelUserCreateInput, ChannelUserUncheckedCreateInput>
  }


  /**
   * ChannelUser createMany
   */
  export type ChannelUserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChannelUsers.
     */
    data: ChannelUserCreateManyInput | ChannelUserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ChannelUser update
   */
  export type ChannelUserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelUser
     */
    select?: ChannelUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelUserInclude<ExtArgs> | null
    /**
     * The data needed to update a ChannelUser.
     */
    data: XOR<ChannelUserUpdateInput, ChannelUserUncheckedUpdateInput>
    /**
     * Choose, which ChannelUser to update.
     */
    where: ChannelUserWhereUniqueInput
  }


  /**
   * ChannelUser updateMany
   */
  export type ChannelUserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChannelUsers.
     */
    data: XOR<ChannelUserUpdateManyMutationInput, ChannelUserUncheckedUpdateManyInput>
    /**
     * Filter which ChannelUsers to update
     */
    where?: ChannelUserWhereInput
  }


  /**
   * ChannelUser upsert
   */
  export type ChannelUserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelUser
     */
    select?: ChannelUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelUserInclude<ExtArgs> | null
    /**
     * The filter to search for the ChannelUser to update in case it exists.
     */
    where: ChannelUserWhereUniqueInput
    /**
     * In case the ChannelUser found by the `where` argument doesn't exist, create a new ChannelUser with this data.
     */
    create: XOR<ChannelUserCreateInput, ChannelUserUncheckedCreateInput>
    /**
     * In case the ChannelUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelUserUpdateInput, ChannelUserUncheckedUpdateInput>
  }


  /**
   * ChannelUser delete
   */
  export type ChannelUserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelUser
     */
    select?: ChannelUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelUserInclude<ExtArgs> | null
    /**
     * Filter which ChannelUser to delete.
     */
    where: ChannelUserWhereUniqueInput
  }


  /**
   * ChannelUser deleteMany
   */
  export type ChannelUserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChannelUsers to delete
     */
    where?: ChannelUserWhereInput
  }


  /**
   * ChannelUser without action
   */
  export type ChannelUserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelUser
     */
    select?: ChannelUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelUserInclude<ExtArgs> | null
  }



  /**
   * Model ChannelMessage
   */

  export type AggregateChannelMessage = {
    _count: ChannelMessageCountAggregateOutputType | null
    _avg: ChannelMessageAvgAggregateOutputType | null
    _sum: ChannelMessageSumAggregateOutputType | null
    _min: ChannelMessageMinAggregateOutputType | null
    _max: ChannelMessageMaxAggregateOutputType | null
  }

  export type ChannelMessageAvgAggregateOutputType = {
    id: number | null
    channelId: number | null
    fromUserId: number | null
  }

  export type ChannelMessageSumAggregateOutputType = {
    id: number | null
    channelId: number | null
    fromUserId: number | null
  }

  export type ChannelMessageMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    channelId: number | null
    fromUserId: number | null
    message: string | null
  }

  export type ChannelMessageMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    channelId: number | null
    fromUserId: number | null
    message: string | null
  }

  export type ChannelMessageCountAggregateOutputType = {
    id: number
    createdAt: number
    channelId: number
    fromUserId: number
    message: number
    _all: number
  }


  export type ChannelMessageAvgAggregateInputType = {
    id?: true
    channelId?: true
    fromUserId?: true
  }

  export type ChannelMessageSumAggregateInputType = {
    id?: true
    channelId?: true
    fromUserId?: true
  }

  export type ChannelMessageMinAggregateInputType = {
    id?: true
    createdAt?: true
    channelId?: true
    fromUserId?: true
    message?: true
  }

  export type ChannelMessageMaxAggregateInputType = {
    id?: true
    createdAt?: true
    channelId?: true
    fromUserId?: true
    message?: true
  }

  export type ChannelMessageCountAggregateInputType = {
    id?: true
    createdAt?: true
    channelId?: true
    fromUserId?: true
    message?: true
    _all?: true
  }

  export type ChannelMessageAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChannelMessage to aggregate.
     */
    where?: ChannelMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelMessages to fetch.
     */
    orderBy?: ChannelMessageOrderByWithRelationInput | ChannelMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChannelMessages
    **/
    _count?: true | ChannelMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChannelMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChannelMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelMessageMaxAggregateInputType
  }

  export type GetChannelMessageAggregateType<T extends ChannelMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChannelMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannelMessage[P]>
      : GetScalarType<T[P], AggregateChannelMessage[P]>
  }




  export type ChannelMessageGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ChannelMessageWhereInput
    orderBy?: ChannelMessageOrderByWithAggregationInput | ChannelMessageOrderByWithAggregationInput[]
    by: ChannelMessageScalarFieldEnum[] | ChannelMessageScalarFieldEnum
    having?: ChannelMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelMessageCountAggregateInputType | true
    _avg?: ChannelMessageAvgAggregateInputType
    _sum?: ChannelMessageSumAggregateInputType
    _min?: ChannelMessageMinAggregateInputType
    _max?: ChannelMessageMaxAggregateInputType
  }

  export type ChannelMessageGroupByOutputType = {
    id: number
    createdAt: Date
    channelId: number
    fromUserId: number
    message: string
    _count: ChannelMessageCountAggregateOutputType | null
    _avg: ChannelMessageAvgAggregateOutputType | null
    _sum: ChannelMessageSumAggregateOutputType | null
    _min: ChannelMessageMinAggregateOutputType | null
    _max: ChannelMessageMaxAggregateOutputType | null
  }

  type GetChannelMessageGroupByPayload<T extends ChannelMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChannelMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChannelMessageSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    channelId?: boolean
    fromUserId?: boolean
    message?: boolean
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["channelMessage"]>

  export type ChannelMessageSelectScalar = {
    id?: boolean
    createdAt?: boolean
    channelId?: boolean
    fromUserId?: boolean
    message?: boolean
  }

  export type ChannelMessageInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    channel?: boolean | ChannelDefaultArgs<ExtArgs>
    fromUser?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $ChannelMessagePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "ChannelMessage"
    objects: {
      channel: Prisma.$ChannelPayload<ExtArgs>
      fromUser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      createdAt: Date
      channelId: number
      fromUserId: number
      message: string
    }, ExtArgs["result"]["channelMessage"]>
    composites: {}
  }


  type ChannelMessageGetPayload<S extends boolean | null | undefined | ChannelMessageDefaultArgs> = $Result.GetResult<Prisma.$ChannelMessagePayload, S>

  type ChannelMessageCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ChannelMessageFindManyArgs, 'select' | 'include'> & {
      select?: ChannelMessageCountAggregateInputType | true
    }

  export interface ChannelMessageDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChannelMessage'], meta: { name: 'ChannelMessage' } }
    /**
     * Find zero or one ChannelMessage that matches the filter.
     * @param {ChannelMessageFindUniqueArgs} args - Arguments to find a ChannelMessage
     * @example
     * // Get one ChannelMessage
     * const channelMessage = await prisma.channelMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelMessageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelMessageFindUniqueArgs<ExtArgs>>
    ): Prisma__ChannelMessageClient<$Result.GetResult<Prisma.$ChannelMessagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ChannelMessage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelMessageFindUniqueOrThrowArgs} args - Arguments to find a ChannelMessage
     * @example
     * // Get one ChannelMessage
     * const channelMessage = await prisma.channelMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelMessageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelMessageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelMessageClient<$Result.GetResult<Prisma.$ChannelMessagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ChannelMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMessageFindFirstArgs} args - Arguments to find a ChannelMessage
     * @example
     * // Get one ChannelMessage
     * const channelMessage = await prisma.channelMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelMessageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelMessageFindFirstArgs<ExtArgs>>
    ): Prisma__ChannelMessageClient<$Result.GetResult<Prisma.$ChannelMessagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ChannelMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMessageFindFirstOrThrowArgs} args - Arguments to find a ChannelMessage
     * @example
     * // Get one ChannelMessage
     * const channelMessage = await prisma.channelMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelMessageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelMessageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChannelMessageClient<$Result.GetResult<Prisma.$ChannelMessagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ChannelMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMessageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChannelMessages
     * const channelMessages = await prisma.channelMessage.findMany()
     * 
     * // Get first 10 ChannelMessages
     * const channelMessages = await prisma.channelMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelMessageWithIdOnly = await prisma.channelMessage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelMessageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelMessageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChannelMessagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ChannelMessage.
     * @param {ChannelMessageCreateArgs} args - Arguments to create a ChannelMessage.
     * @example
     * // Create one ChannelMessage
     * const ChannelMessage = await prisma.channelMessage.create({
     *   data: {
     *     // ... data to create a ChannelMessage
     *   }
     * })
     * 
    **/
    create<T extends ChannelMessageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelMessageCreateArgs<ExtArgs>>
    ): Prisma__ChannelMessageClient<$Result.GetResult<Prisma.$ChannelMessagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ChannelMessages.
     *     @param {ChannelMessageCreateManyArgs} args - Arguments to create many ChannelMessages.
     *     @example
     *     // Create many ChannelMessages
     *     const channelMessage = await prisma.channelMessage.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelMessageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelMessageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChannelMessage.
     * @param {ChannelMessageDeleteArgs} args - Arguments to delete one ChannelMessage.
     * @example
     * // Delete one ChannelMessage
     * const ChannelMessage = await prisma.channelMessage.delete({
     *   where: {
     *     // ... filter to delete one ChannelMessage
     *   }
     * })
     * 
    **/
    delete<T extends ChannelMessageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelMessageDeleteArgs<ExtArgs>>
    ): Prisma__ChannelMessageClient<$Result.GetResult<Prisma.$ChannelMessagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ChannelMessage.
     * @param {ChannelMessageUpdateArgs} args - Arguments to update one ChannelMessage.
     * @example
     * // Update one ChannelMessage
     * const channelMessage = await prisma.channelMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelMessageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelMessageUpdateArgs<ExtArgs>>
    ): Prisma__ChannelMessageClient<$Result.GetResult<Prisma.$ChannelMessagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ChannelMessages.
     * @param {ChannelMessageDeleteManyArgs} args - Arguments to filter ChannelMessages to delete.
     * @example
     * // Delete a few ChannelMessages
     * const { count } = await prisma.channelMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelMessageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChannelMessageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChannelMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChannelMessages
     * const channelMessage = await prisma.channelMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelMessageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelMessageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChannelMessage.
     * @param {ChannelMessageUpsertArgs} args - Arguments to update or create a ChannelMessage.
     * @example
     * // Update or create a ChannelMessage
     * const channelMessage = await prisma.channelMessage.upsert({
     *   create: {
     *     // ... data to create a ChannelMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChannelMessage we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelMessageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChannelMessageUpsertArgs<ExtArgs>>
    ): Prisma__ChannelMessageClient<$Result.GetResult<Prisma.$ChannelMessagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ChannelMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMessageCountArgs} args - Arguments to filter ChannelMessages to count.
     * @example
     * // Count the number of ChannelMessages
     * const count = await prisma.channelMessage.count({
     *   where: {
     *     // ... the filter for the ChannelMessages we want to count
     *   }
     * })
    **/
    count<T extends ChannelMessageCountArgs>(
      args?: Subset<T, ChannelMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChannelMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelMessageAggregateArgs>(args: Subset<T, ChannelMessageAggregateArgs>): Prisma.PrismaPromise<GetChannelMessageAggregateType<T>>

    /**
     * Group by ChannelMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChannelMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChannelMessage model
   */
  readonly fields: ChannelMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChannelMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChannelMessageClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    channel<T extends ChannelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChannelDefaultArgs<ExtArgs>>): Prisma__ChannelClient<$Result.GetResult<Prisma.$ChannelPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    fromUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ChannelMessage model
   */ 
  interface ChannelMessageFieldRefs {
    readonly id: FieldRef<"ChannelMessage", 'Int'>
    readonly createdAt: FieldRef<"ChannelMessage", 'DateTime'>
    readonly channelId: FieldRef<"ChannelMessage", 'Int'>
    readonly fromUserId: FieldRef<"ChannelMessage", 'Int'>
    readonly message: FieldRef<"ChannelMessage", 'String'>
  }
    

  // Custom InputTypes

  /**
   * ChannelMessage findUnique
   */
  export type ChannelMessageFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMessage
     */
    select?: ChannelMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChannelMessage to fetch.
     */
    where: ChannelMessageWhereUniqueInput
  }


  /**
   * ChannelMessage findUniqueOrThrow
   */
  export type ChannelMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMessage
     */
    select?: ChannelMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChannelMessage to fetch.
     */
    where: ChannelMessageWhereUniqueInput
  }


  /**
   * ChannelMessage findFirst
   */
  export type ChannelMessageFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMessage
     */
    select?: ChannelMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChannelMessage to fetch.
     */
    where?: ChannelMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelMessages to fetch.
     */
    orderBy?: ChannelMessageOrderByWithRelationInput | ChannelMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelMessages.
     */
    cursor?: ChannelMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelMessages.
     */
    distinct?: ChannelMessageScalarFieldEnum | ChannelMessageScalarFieldEnum[]
  }


  /**
   * ChannelMessage findFirstOrThrow
   */
  export type ChannelMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMessage
     */
    select?: ChannelMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChannelMessage to fetch.
     */
    where?: ChannelMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelMessages to fetch.
     */
    orderBy?: ChannelMessageOrderByWithRelationInput | ChannelMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelMessages.
     */
    cursor?: ChannelMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelMessages.
     */
    distinct?: ChannelMessageScalarFieldEnum | ChannelMessageScalarFieldEnum[]
  }


  /**
   * ChannelMessage findMany
   */
  export type ChannelMessageFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMessage
     */
    select?: ChannelMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChannelMessages to fetch.
     */
    where?: ChannelMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelMessages to fetch.
     */
    orderBy?: ChannelMessageOrderByWithRelationInput | ChannelMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChannelMessages.
     */
    cursor?: ChannelMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelMessages.
     */
    skip?: number
    distinct?: ChannelMessageScalarFieldEnum | ChannelMessageScalarFieldEnum[]
  }


  /**
   * ChannelMessage create
   */
  export type ChannelMessageCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMessage
     */
    select?: ChannelMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChannelMessage.
     */
    data: XOR<ChannelMessageCreateInput, ChannelMessageUncheckedCreateInput>
  }


  /**
   * ChannelMessage createMany
   */
  export type ChannelMessageCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChannelMessages.
     */
    data: ChannelMessageCreateManyInput | ChannelMessageCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ChannelMessage update
   */
  export type ChannelMessageUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMessage
     */
    select?: ChannelMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChannelMessage.
     */
    data: XOR<ChannelMessageUpdateInput, ChannelMessageUncheckedUpdateInput>
    /**
     * Choose, which ChannelMessage to update.
     */
    where: ChannelMessageWhereUniqueInput
  }


  /**
   * ChannelMessage updateMany
   */
  export type ChannelMessageUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChannelMessages.
     */
    data: XOR<ChannelMessageUpdateManyMutationInput, ChannelMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChannelMessages to update
     */
    where?: ChannelMessageWhereInput
  }


  /**
   * ChannelMessage upsert
   */
  export type ChannelMessageUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMessage
     */
    select?: ChannelMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChannelMessage to update in case it exists.
     */
    where: ChannelMessageWhereUniqueInput
    /**
     * In case the ChannelMessage found by the `where` argument doesn't exist, create a new ChannelMessage with this data.
     */
    create: XOR<ChannelMessageCreateInput, ChannelMessageUncheckedCreateInput>
    /**
     * In case the ChannelMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelMessageUpdateInput, ChannelMessageUncheckedUpdateInput>
  }


  /**
   * ChannelMessage delete
   */
  export type ChannelMessageDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMessage
     */
    select?: ChannelMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMessageInclude<ExtArgs> | null
    /**
     * Filter which ChannelMessage to delete.
     */
    where: ChannelMessageWhereUniqueInput
  }


  /**
   * ChannelMessage deleteMany
   */
  export type ChannelMessageDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChannelMessages to delete
     */
    where?: ChannelMessageWhereInput
  }


  /**
   * ChannelMessage without action
   */
  export type ChannelMessageDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChannelMessage
     */
    select?: ChannelMessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelMessageInclude<ExtArgs> | null
  }



  /**
   * Model SourceBans
   */

  export type AggregateSourceBans = {
    _count: SourceBansCountAggregateOutputType | null
    _avg: SourceBansAvgAggregateOutputType | null
    _sum: SourceBansSumAggregateOutputType | null
    _min: SourceBansMinAggregateOutputType | null
    _max: SourceBansMaxAggregateOutputType | null
  }

  export type SourceBansAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
    duration: number | null
  }

  export type SourceBansSumAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
    duration: number | null
  }

  export type SourceBansMinAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
    adminUsername: string | null
    type: string | null
    createdAt: Date | null
    expireAt: Date | null
    duration: number | null
    reason: string | null
  }

  export type SourceBansMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    channelId: number | null
    adminUsername: string | null
    type: string | null
    createdAt: Date | null
    expireAt: Date | null
    duration: number | null
    reason: string | null
  }

  export type SourceBansCountAggregateOutputType = {
    id: number
    userId: number
    channelId: number
    adminUsername: number
    type: number
    createdAt: number
    expireAt: number
    duration: number
    reason: number
    _all: number
  }


  export type SourceBansAvgAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    duration?: true
  }

  export type SourceBansSumAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    duration?: true
  }

  export type SourceBansMinAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    adminUsername?: true
    type?: true
    createdAt?: true
    expireAt?: true
    duration?: true
    reason?: true
  }

  export type SourceBansMaxAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    adminUsername?: true
    type?: true
    createdAt?: true
    expireAt?: true
    duration?: true
    reason?: true
  }

  export type SourceBansCountAggregateInputType = {
    id?: true
    userId?: true
    channelId?: true
    adminUsername?: true
    type?: true
    createdAt?: true
    expireAt?: true
    duration?: true
    reason?: true
    _all?: true
  }

  export type SourceBansAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SourceBans to aggregate.
     */
    where?: SourceBansWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SourceBans to fetch.
     */
    orderBy?: SourceBansOrderByWithRelationInput | SourceBansOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SourceBansWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SourceBans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SourceBans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SourceBans
    **/
    _count?: true | SourceBansCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SourceBansAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SourceBansSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SourceBansMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SourceBansMaxAggregateInputType
  }

  export type GetSourceBansAggregateType<T extends SourceBansAggregateArgs> = {
        [P in keyof T & keyof AggregateSourceBans]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSourceBans[P]>
      : GetScalarType<T[P], AggregateSourceBans[P]>
  }




  export type SourceBansGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: SourceBansWhereInput
    orderBy?: SourceBansOrderByWithAggregationInput | SourceBansOrderByWithAggregationInput[]
    by: SourceBansScalarFieldEnum[] | SourceBansScalarFieldEnum
    having?: SourceBansScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SourceBansCountAggregateInputType | true
    _avg?: SourceBansAvgAggregateInputType
    _sum?: SourceBansSumAggregateInputType
    _min?: SourceBansMinAggregateInputType
    _max?: SourceBansMaxAggregateInputType
  }

  export type SourceBansGroupByOutputType = {
    id: number
    userId: number
    channelId: number
    adminUsername: string
    type: string
    createdAt: Date
    expireAt: Date
    duration: number
    reason: string
    _count: SourceBansCountAggregateOutputType | null
    _avg: SourceBansAvgAggregateOutputType | null
    _sum: SourceBansSumAggregateOutputType | null
    _min: SourceBansMinAggregateOutputType | null
    _max: SourceBansMaxAggregateOutputType | null
  }

  type GetSourceBansGroupByPayload<T extends SourceBansGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SourceBansGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SourceBansGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SourceBansGroupByOutputType[P]>
            : GetScalarType<T[P], SourceBansGroupByOutputType[P]>
        }
      >
    >


  export type SourceBansSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    channelId?: boolean
    adminUsername?: boolean
    type?: boolean
    createdAt?: boolean
    expireAt?: boolean
    duration?: boolean
    reason?: boolean
  }, ExtArgs["result"]["sourceBans"]>

  export type SourceBansSelectScalar = {
    id?: boolean
    userId?: boolean
    channelId?: boolean
    adminUsername?: boolean
    type?: boolean
    createdAt?: boolean
    expireAt?: boolean
    duration?: boolean
    reason?: boolean
  }


  export type $SourceBansPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "SourceBans"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      userId: number
      channelId: number
      adminUsername: string
      type: string
      createdAt: Date
      expireAt: Date
      duration: number
      reason: string
    }, ExtArgs["result"]["sourceBans"]>
    composites: {}
  }


  type SourceBansGetPayload<S extends boolean | null | undefined | SourceBansDefaultArgs> = $Result.GetResult<Prisma.$SourceBansPayload, S>

  type SourceBansCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<SourceBansFindManyArgs, 'select' | 'include'> & {
      select?: SourceBansCountAggregateInputType | true
    }

  export interface SourceBansDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SourceBans'], meta: { name: 'SourceBans' } }
    /**
     * Find zero or one SourceBans that matches the filter.
     * @param {SourceBansFindUniqueArgs} args - Arguments to find a SourceBans
     * @example
     * // Get one SourceBans
     * const sourceBans = await prisma.sourceBans.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SourceBansFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SourceBansFindUniqueArgs<ExtArgs>>
    ): Prisma__SourceBansClient<$Result.GetResult<Prisma.$SourceBansPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SourceBans that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SourceBansFindUniqueOrThrowArgs} args - Arguments to find a SourceBans
     * @example
     * // Get one SourceBans
     * const sourceBans = await prisma.sourceBans.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SourceBansFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SourceBansFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SourceBansClient<$Result.GetResult<Prisma.$SourceBansPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SourceBans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceBansFindFirstArgs} args - Arguments to find a SourceBans
     * @example
     * // Get one SourceBans
     * const sourceBans = await prisma.sourceBans.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SourceBansFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SourceBansFindFirstArgs<ExtArgs>>
    ): Prisma__SourceBansClient<$Result.GetResult<Prisma.$SourceBansPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SourceBans that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceBansFindFirstOrThrowArgs} args - Arguments to find a SourceBans
     * @example
     * // Get one SourceBans
     * const sourceBans = await prisma.sourceBans.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SourceBansFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SourceBansFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SourceBansClient<$Result.GetResult<Prisma.$SourceBansPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SourceBans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceBansFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SourceBans
     * const sourceBans = await prisma.sourceBans.findMany()
     * 
     * // Get first 10 SourceBans
     * const sourceBans = await prisma.sourceBans.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sourceBansWithIdOnly = await prisma.sourceBans.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SourceBansFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SourceBansFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SourceBansPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SourceBans.
     * @param {SourceBansCreateArgs} args - Arguments to create a SourceBans.
     * @example
     * // Create one SourceBans
     * const SourceBans = await prisma.sourceBans.create({
     *   data: {
     *     // ... data to create a SourceBans
     *   }
     * })
     * 
    **/
    create<T extends SourceBansCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SourceBansCreateArgs<ExtArgs>>
    ): Prisma__SourceBansClient<$Result.GetResult<Prisma.$SourceBansPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SourceBans.
     *     @param {SourceBansCreateManyArgs} args - Arguments to create many SourceBans.
     *     @example
     *     // Create many SourceBans
     *     const sourceBans = await prisma.sourceBans.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SourceBansCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SourceBansCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SourceBans.
     * @param {SourceBansDeleteArgs} args - Arguments to delete one SourceBans.
     * @example
     * // Delete one SourceBans
     * const SourceBans = await prisma.sourceBans.delete({
     *   where: {
     *     // ... filter to delete one SourceBans
     *   }
     * })
     * 
    **/
    delete<T extends SourceBansDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SourceBansDeleteArgs<ExtArgs>>
    ): Prisma__SourceBansClient<$Result.GetResult<Prisma.$SourceBansPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SourceBans.
     * @param {SourceBansUpdateArgs} args - Arguments to update one SourceBans.
     * @example
     * // Update one SourceBans
     * const sourceBans = await prisma.sourceBans.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SourceBansUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SourceBansUpdateArgs<ExtArgs>>
    ): Prisma__SourceBansClient<$Result.GetResult<Prisma.$SourceBansPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SourceBans.
     * @param {SourceBansDeleteManyArgs} args - Arguments to filter SourceBans to delete.
     * @example
     * // Delete a few SourceBans
     * const { count } = await prisma.sourceBans.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SourceBansDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SourceBansDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SourceBans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceBansUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SourceBans
     * const sourceBans = await prisma.sourceBans.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SourceBansUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SourceBansUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SourceBans.
     * @param {SourceBansUpsertArgs} args - Arguments to update or create a SourceBans.
     * @example
     * // Update or create a SourceBans
     * const sourceBans = await prisma.sourceBans.upsert({
     *   create: {
     *     // ... data to create a SourceBans
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SourceBans we want to update
     *   }
     * })
    **/
    upsert<T extends SourceBansUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SourceBansUpsertArgs<ExtArgs>>
    ): Prisma__SourceBansClient<$Result.GetResult<Prisma.$SourceBansPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SourceBans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceBansCountArgs} args - Arguments to filter SourceBans to count.
     * @example
     * // Count the number of SourceBans
     * const count = await prisma.sourceBans.count({
     *   where: {
     *     // ... the filter for the SourceBans we want to count
     *   }
     * })
    **/
    count<T extends SourceBansCountArgs>(
      args?: Subset<T, SourceBansCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SourceBansCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SourceBans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceBansAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SourceBansAggregateArgs>(args: Subset<T, SourceBansAggregateArgs>): Prisma.PrismaPromise<GetSourceBansAggregateType<T>>

    /**
     * Group by SourceBans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SourceBansGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SourceBansGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SourceBansGroupByArgs['orderBy'] }
        : { orderBy?: SourceBansGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SourceBansGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSourceBansGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SourceBans model
   */
  readonly fields: SourceBansFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SourceBans.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SourceBansClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SourceBans model
   */ 
  interface SourceBansFieldRefs {
    readonly id: FieldRef<"SourceBans", 'Int'>
    readonly userId: FieldRef<"SourceBans", 'Int'>
    readonly channelId: FieldRef<"SourceBans", 'Int'>
    readonly adminUsername: FieldRef<"SourceBans", 'String'>
    readonly type: FieldRef<"SourceBans", 'String'>
    readonly createdAt: FieldRef<"SourceBans", 'DateTime'>
    readonly expireAt: FieldRef<"SourceBans", 'DateTime'>
    readonly duration: FieldRef<"SourceBans", 'Int'>
    readonly reason: FieldRef<"SourceBans", 'String'>
  }
    

  // Custom InputTypes

  /**
   * SourceBans findUnique
   */
  export type SourceBansFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SourceBans
     */
    select?: SourceBansSelect<ExtArgs> | null
    /**
     * Filter, which SourceBans to fetch.
     */
    where: SourceBansWhereUniqueInput
  }


  /**
   * SourceBans findUniqueOrThrow
   */
  export type SourceBansFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SourceBans
     */
    select?: SourceBansSelect<ExtArgs> | null
    /**
     * Filter, which SourceBans to fetch.
     */
    where: SourceBansWhereUniqueInput
  }


  /**
   * SourceBans findFirst
   */
  export type SourceBansFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SourceBans
     */
    select?: SourceBansSelect<ExtArgs> | null
    /**
     * Filter, which SourceBans to fetch.
     */
    where?: SourceBansWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SourceBans to fetch.
     */
    orderBy?: SourceBansOrderByWithRelationInput | SourceBansOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SourceBans.
     */
    cursor?: SourceBansWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SourceBans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SourceBans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SourceBans.
     */
    distinct?: SourceBansScalarFieldEnum | SourceBansScalarFieldEnum[]
  }


  /**
   * SourceBans findFirstOrThrow
   */
  export type SourceBansFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SourceBans
     */
    select?: SourceBansSelect<ExtArgs> | null
    /**
     * Filter, which SourceBans to fetch.
     */
    where?: SourceBansWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SourceBans to fetch.
     */
    orderBy?: SourceBansOrderByWithRelationInput | SourceBansOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SourceBans.
     */
    cursor?: SourceBansWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SourceBans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SourceBans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SourceBans.
     */
    distinct?: SourceBansScalarFieldEnum | SourceBansScalarFieldEnum[]
  }


  /**
   * SourceBans findMany
   */
  export type SourceBansFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SourceBans
     */
    select?: SourceBansSelect<ExtArgs> | null
    /**
     * Filter, which SourceBans to fetch.
     */
    where?: SourceBansWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SourceBans to fetch.
     */
    orderBy?: SourceBansOrderByWithRelationInput | SourceBansOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SourceBans.
     */
    cursor?: SourceBansWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SourceBans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SourceBans.
     */
    skip?: number
    distinct?: SourceBansScalarFieldEnum | SourceBansScalarFieldEnum[]
  }


  /**
   * SourceBans create
   */
  export type SourceBansCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SourceBans
     */
    select?: SourceBansSelect<ExtArgs> | null
    /**
     * The data needed to create a SourceBans.
     */
    data: XOR<SourceBansCreateInput, SourceBansUncheckedCreateInput>
  }


  /**
   * SourceBans createMany
   */
  export type SourceBansCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SourceBans.
     */
    data: SourceBansCreateManyInput | SourceBansCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SourceBans update
   */
  export type SourceBansUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SourceBans
     */
    select?: SourceBansSelect<ExtArgs> | null
    /**
     * The data needed to update a SourceBans.
     */
    data: XOR<SourceBansUpdateInput, SourceBansUncheckedUpdateInput>
    /**
     * Choose, which SourceBans to update.
     */
    where: SourceBansWhereUniqueInput
  }


  /**
   * SourceBans updateMany
   */
  export type SourceBansUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SourceBans.
     */
    data: XOR<SourceBansUpdateManyMutationInput, SourceBansUncheckedUpdateManyInput>
    /**
     * Filter which SourceBans to update
     */
    where?: SourceBansWhereInput
  }


  /**
   * SourceBans upsert
   */
  export type SourceBansUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SourceBans
     */
    select?: SourceBansSelect<ExtArgs> | null
    /**
     * The filter to search for the SourceBans to update in case it exists.
     */
    where: SourceBansWhereUniqueInput
    /**
     * In case the SourceBans found by the `where` argument doesn't exist, create a new SourceBans with this data.
     */
    create: XOR<SourceBansCreateInput, SourceBansUncheckedCreateInput>
    /**
     * In case the SourceBans was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SourceBansUpdateInput, SourceBansUncheckedUpdateInput>
  }


  /**
   * SourceBans delete
   */
  export type SourceBansDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SourceBans
     */
    select?: SourceBansSelect<ExtArgs> | null
    /**
     * Filter which SourceBans to delete.
     */
    where: SourceBansWhereUniqueInput
  }


  /**
   * SourceBans deleteMany
   */
  export type SourceBansDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which SourceBans to delete
     */
    where?: SourceBansWhereInput
  }


  /**
   * SourceBans without action
   */
  export type SourceBansDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SourceBans
     */
    select?: SourceBansSelect<ExtArgs> | null
  }



  /**
   * Model runningames
   */

  export type AggregateRunningames = {
    _count: RunningamesCountAggregateOutputType | null
    _avg: RunningamesAvgAggregateOutputType | null
    _sum: RunningamesSumAggregateOutputType | null
    _min: RunningamesMinAggregateOutputType | null
    _max: RunningamesMaxAggregateOutputType | null
  }

  export type RunningamesAvgAggregateOutputType = {
    id: number | null
    idPlayer1: number | null
    idPlayer2: number | null
  }

  export type RunningamesSumAggregateOutputType = {
    id: number | null
    idPlayer1: number | null
    idPlayer2: number | null
  }

  export type RunningamesMinAggregateOutputType = {
    id: number | null
    name: string | null
    idPlayer1: number | null
    idPlayer2: number | null
    hardMode: boolean | null
    isReadInPongModule: boolean | null
  }

  export type RunningamesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    idPlayer1: number | null
    idPlayer2: number | null
    hardMode: boolean | null
    isReadInPongModule: boolean | null
  }

  export type RunningamesCountAggregateOutputType = {
    id: number
    name: number
    idPlayer1: number
    idPlayer2: number
    hardMode: number
    isReadInPongModule: number
    _all: number
  }


  export type RunningamesAvgAggregateInputType = {
    id?: true
    idPlayer1?: true
    idPlayer2?: true
  }

  export type RunningamesSumAggregateInputType = {
    id?: true
    idPlayer1?: true
    idPlayer2?: true
  }

  export type RunningamesMinAggregateInputType = {
    id?: true
    name?: true
    idPlayer1?: true
    idPlayer2?: true
    hardMode?: true
    isReadInPongModule?: true
  }

  export type RunningamesMaxAggregateInputType = {
    id?: true
    name?: true
    idPlayer1?: true
    idPlayer2?: true
    hardMode?: true
    isReadInPongModule?: true
  }

  export type RunningamesCountAggregateInputType = {
    id?: true
    name?: true
    idPlayer1?: true
    idPlayer2?: true
    hardMode?: true
    isReadInPongModule?: true
    _all?: true
  }

  export type RunningamesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which runningames to aggregate.
     */
    where?: runningamesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of runningames to fetch.
     */
    orderBy?: runningamesOrderByWithRelationInput | runningamesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: runningamesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` runningames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` runningames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned runningames
    **/
    _count?: true | RunningamesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RunningamesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RunningamesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RunningamesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RunningamesMaxAggregateInputType
  }

  export type GetRunningamesAggregateType<T extends RunningamesAggregateArgs> = {
        [P in keyof T & keyof AggregateRunningames]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRunningames[P]>
      : GetScalarType<T[P], AggregateRunningames[P]>
  }




  export type runningamesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: runningamesWhereInput
    orderBy?: runningamesOrderByWithAggregationInput | runningamesOrderByWithAggregationInput[]
    by: RunningamesScalarFieldEnum[] | RunningamesScalarFieldEnum
    having?: runningamesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RunningamesCountAggregateInputType | true
    _avg?: RunningamesAvgAggregateInputType
    _sum?: RunningamesSumAggregateInputType
    _min?: RunningamesMinAggregateInputType
    _max?: RunningamesMaxAggregateInputType
  }

  export type RunningamesGroupByOutputType = {
    id: number
    name: string
    idPlayer1: number
    idPlayer2: number
    hardMode: boolean
    isReadInPongModule: boolean
    _count: RunningamesCountAggregateOutputType | null
    _avg: RunningamesAvgAggregateOutputType | null
    _sum: RunningamesSumAggregateOutputType | null
    _min: RunningamesMinAggregateOutputType | null
    _max: RunningamesMaxAggregateOutputType | null
  }

  type GetRunningamesGroupByPayload<T extends runningamesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RunningamesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RunningamesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RunningamesGroupByOutputType[P]>
            : GetScalarType<T[P], RunningamesGroupByOutputType[P]>
        }
      >
    >


  export type runningamesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    idPlayer1?: boolean
    idPlayer2?: boolean
    hardMode?: boolean
    isReadInPongModule?: boolean
  }, ExtArgs["result"]["runningames"]>

  export type runningamesSelectScalar = {
    id?: boolean
    name?: boolean
    idPlayer1?: boolean
    idPlayer2?: boolean
    hardMode?: boolean
    isReadInPongModule?: boolean
  }


  export type $runningamesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "runningames"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      name: string
      idPlayer1: number
      idPlayer2: number
      hardMode: boolean
      isReadInPongModule: boolean
    }, ExtArgs["result"]["runningames"]>
    composites: {}
  }


  type runningamesGetPayload<S extends boolean | null | undefined | runningamesDefaultArgs> = $Result.GetResult<Prisma.$runningamesPayload, S>

  type runningamesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<runningamesFindManyArgs, 'select' | 'include'> & {
      select?: RunningamesCountAggregateInputType | true
    }

  export interface runningamesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['runningames'], meta: { name: 'runningames' } }
    /**
     * Find zero or one Runningames that matches the filter.
     * @param {runningamesFindUniqueArgs} args - Arguments to find a Runningames
     * @example
     * // Get one Runningames
     * const runningames = await prisma.runningames.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends runningamesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, runningamesFindUniqueArgs<ExtArgs>>
    ): Prisma__runningamesClient<$Result.GetResult<Prisma.$runningamesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Runningames that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {runningamesFindUniqueOrThrowArgs} args - Arguments to find a Runningames
     * @example
     * // Get one Runningames
     * const runningames = await prisma.runningames.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends runningamesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, runningamesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__runningamesClient<$Result.GetResult<Prisma.$runningamesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Runningames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {runningamesFindFirstArgs} args - Arguments to find a Runningames
     * @example
     * // Get one Runningames
     * const runningames = await prisma.runningames.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends runningamesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, runningamesFindFirstArgs<ExtArgs>>
    ): Prisma__runningamesClient<$Result.GetResult<Prisma.$runningamesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Runningames that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {runningamesFindFirstOrThrowArgs} args - Arguments to find a Runningames
     * @example
     * // Get one Runningames
     * const runningames = await prisma.runningames.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends runningamesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, runningamesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__runningamesClient<$Result.GetResult<Prisma.$runningamesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Runningames that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {runningamesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Runningames
     * const runningames = await prisma.runningames.findMany()
     * 
     * // Get first 10 Runningames
     * const runningames = await prisma.runningames.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const runningamesWithIdOnly = await prisma.runningames.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends runningamesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, runningamesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$runningamesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Runningames.
     * @param {runningamesCreateArgs} args - Arguments to create a Runningames.
     * @example
     * // Create one Runningames
     * const Runningames = await prisma.runningames.create({
     *   data: {
     *     // ... data to create a Runningames
     *   }
     * })
     * 
    **/
    create<T extends runningamesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, runningamesCreateArgs<ExtArgs>>
    ): Prisma__runningamesClient<$Result.GetResult<Prisma.$runningamesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Runningames.
     *     @param {runningamesCreateManyArgs} args - Arguments to create many Runningames.
     *     @example
     *     // Create many Runningames
     *     const runningames = await prisma.runningames.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends runningamesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, runningamesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Runningames.
     * @param {runningamesDeleteArgs} args - Arguments to delete one Runningames.
     * @example
     * // Delete one Runningames
     * const Runningames = await prisma.runningames.delete({
     *   where: {
     *     // ... filter to delete one Runningames
     *   }
     * })
     * 
    **/
    delete<T extends runningamesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, runningamesDeleteArgs<ExtArgs>>
    ): Prisma__runningamesClient<$Result.GetResult<Prisma.$runningamesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Runningames.
     * @param {runningamesUpdateArgs} args - Arguments to update one Runningames.
     * @example
     * // Update one Runningames
     * const runningames = await prisma.runningames.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends runningamesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, runningamesUpdateArgs<ExtArgs>>
    ): Prisma__runningamesClient<$Result.GetResult<Prisma.$runningamesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Runningames.
     * @param {runningamesDeleteManyArgs} args - Arguments to filter Runningames to delete.
     * @example
     * // Delete a few Runningames
     * const { count } = await prisma.runningames.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends runningamesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, runningamesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Runningames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {runningamesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Runningames
     * const runningames = await prisma.runningames.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends runningamesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, runningamesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Runningames.
     * @param {runningamesUpsertArgs} args - Arguments to update or create a Runningames.
     * @example
     * // Update or create a Runningames
     * const runningames = await prisma.runningames.upsert({
     *   create: {
     *     // ... data to create a Runningames
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Runningames we want to update
     *   }
     * })
    **/
    upsert<T extends runningamesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, runningamesUpsertArgs<ExtArgs>>
    ): Prisma__runningamesClient<$Result.GetResult<Prisma.$runningamesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Runningames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {runningamesCountArgs} args - Arguments to filter Runningames to count.
     * @example
     * // Count the number of Runningames
     * const count = await prisma.runningames.count({
     *   where: {
     *     // ... the filter for the Runningames we want to count
     *   }
     * })
    **/
    count<T extends runningamesCountArgs>(
      args?: Subset<T, runningamesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RunningamesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Runningames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RunningamesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RunningamesAggregateArgs>(args: Subset<T, RunningamesAggregateArgs>): Prisma.PrismaPromise<GetRunningamesAggregateType<T>>

    /**
     * Group by Runningames.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {runningamesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends runningamesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: runningamesGroupByArgs['orderBy'] }
        : { orderBy?: runningamesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, runningamesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRunningamesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the runningames model
   */
  readonly fields: runningamesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for runningames.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__runningamesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the runningames model
   */ 
  interface runningamesFieldRefs {
    readonly id: FieldRef<"runningames", 'Int'>
    readonly name: FieldRef<"runningames", 'String'>
    readonly idPlayer1: FieldRef<"runningames", 'Int'>
    readonly idPlayer2: FieldRef<"runningames", 'Int'>
    readonly hardMode: FieldRef<"runningames", 'Boolean'>
    readonly isReadInPongModule: FieldRef<"runningames", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * runningames findUnique
   */
  export type runningamesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the runningames
     */
    select?: runningamesSelect<ExtArgs> | null
    /**
     * Filter, which runningames to fetch.
     */
    where: runningamesWhereUniqueInput
  }


  /**
   * runningames findUniqueOrThrow
   */
  export type runningamesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the runningames
     */
    select?: runningamesSelect<ExtArgs> | null
    /**
     * Filter, which runningames to fetch.
     */
    where: runningamesWhereUniqueInput
  }


  /**
   * runningames findFirst
   */
  export type runningamesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the runningames
     */
    select?: runningamesSelect<ExtArgs> | null
    /**
     * Filter, which runningames to fetch.
     */
    where?: runningamesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of runningames to fetch.
     */
    orderBy?: runningamesOrderByWithRelationInput | runningamesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for runningames.
     */
    cursor?: runningamesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` runningames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` runningames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of runningames.
     */
    distinct?: RunningamesScalarFieldEnum | RunningamesScalarFieldEnum[]
  }


  /**
   * runningames findFirstOrThrow
   */
  export type runningamesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the runningames
     */
    select?: runningamesSelect<ExtArgs> | null
    /**
     * Filter, which runningames to fetch.
     */
    where?: runningamesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of runningames to fetch.
     */
    orderBy?: runningamesOrderByWithRelationInput | runningamesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for runningames.
     */
    cursor?: runningamesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` runningames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` runningames.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of runningames.
     */
    distinct?: RunningamesScalarFieldEnum | RunningamesScalarFieldEnum[]
  }


  /**
   * runningames findMany
   */
  export type runningamesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the runningames
     */
    select?: runningamesSelect<ExtArgs> | null
    /**
     * Filter, which runningames to fetch.
     */
    where?: runningamesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of runningames to fetch.
     */
    orderBy?: runningamesOrderByWithRelationInput | runningamesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing runningames.
     */
    cursor?: runningamesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` runningames from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` runningames.
     */
    skip?: number
    distinct?: RunningamesScalarFieldEnum | RunningamesScalarFieldEnum[]
  }


  /**
   * runningames create
   */
  export type runningamesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the runningames
     */
    select?: runningamesSelect<ExtArgs> | null
    /**
     * The data needed to create a runningames.
     */
    data: XOR<runningamesCreateInput, runningamesUncheckedCreateInput>
  }


  /**
   * runningames createMany
   */
  export type runningamesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many runningames.
     */
    data: runningamesCreateManyInput | runningamesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * runningames update
   */
  export type runningamesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the runningames
     */
    select?: runningamesSelect<ExtArgs> | null
    /**
     * The data needed to update a runningames.
     */
    data: XOR<runningamesUpdateInput, runningamesUncheckedUpdateInput>
    /**
     * Choose, which runningames to update.
     */
    where: runningamesWhereUniqueInput
  }


  /**
   * runningames updateMany
   */
  export type runningamesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update runningames.
     */
    data: XOR<runningamesUpdateManyMutationInput, runningamesUncheckedUpdateManyInput>
    /**
     * Filter which runningames to update
     */
    where?: runningamesWhereInput
  }


  /**
   * runningames upsert
   */
  export type runningamesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the runningames
     */
    select?: runningamesSelect<ExtArgs> | null
    /**
     * The filter to search for the runningames to update in case it exists.
     */
    where: runningamesWhereUniqueInput
    /**
     * In case the runningames found by the `where` argument doesn't exist, create a new runningames with this data.
     */
    create: XOR<runningamesCreateInput, runningamesUncheckedCreateInput>
    /**
     * In case the runningames was found with the provided `where` argument, update it with this data.
     */
    update: XOR<runningamesUpdateInput, runningamesUncheckedUpdateInput>
  }


  /**
   * runningames delete
   */
  export type runningamesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the runningames
     */
    select?: runningamesSelect<ExtArgs> | null
    /**
     * Filter which runningames to delete.
     */
    where: runningamesWhereUniqueInput
  }


  /**
   * runningames deleteMany
   */
  export type runningamesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which runningames to delete
     */
    where?: runningamesWhereInput
  }


  /**
   * runningames without action
   */
  export type runningamesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the runningames
     */
    select?: runningamesSelect<ExtArgs> | null
  }



  /**
   * Model gameHistory
   */

  export type AggregateGameHistory = {
    _count: GameHistoryCountAggregateOutputType | null
    _avg: GameHistoryAvgAggregateOutputType | null
    _sum: GameHistorySumAggregateOutputType | null
    _min: GameHistoryMinAggregateOutputType | null
    _max: GameHistoryMaxAggregateOutputType | null
  }

  export type GameHistoryAvgAggregateOutputType = {
    id: number | null
    idPlayer1: number | null
    idPlayer2: number | null
    scorePlayer1: number | null
    scorePlayer2: number | null
    idWinner: number | null
  }

  export type GameHistorySumAggregateOutputType = {
    id: number | null
    idPlayer1: number | null
    idPlayer2: number | null
    scorePlayer1: number | null
    scorePlayer2: number | null
    idWinner: number | null
  }

  export type GameHistoryMinAggregateOutputType = {
    id: number | null
    date: Date | null
    idPlayer1: number | null
    idPlayer2: number | null
    scorePlayer1: number | null
    scorePlayer2: number | null
    idWinner: number | null
  }

  export type GameHistoryMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    idPlayer1: number | null
    idPlayer2: number | null
    scorePlayer1: number | null
    scorePlayer2: number | null
    idWinner: number | null
  }

  export type GameHistoryCountAggregateOutputType = {
    id: number
    date: number
    idPlayer1: number
    idPlayer2: number
    scorePlayer1: number
    scorePlayer2: number
    idWinner: number
    _all: number
  }


  export type GameHistoryAvgAggregateInputType = {
    id?: true
    idPlayer1?: true
    idPlayer2?: true
    scorePlayer1?: true
    scorePlayer2?: true
    idWinner?: true
  }

  export type GameHistorySumAggregateInputType = {
    id?: true
    idPlayer1?: true
    idPlayer2?: true
    scorePlayer1?: true
    scorePlayer2?: true
    idWinner?: true
  }

  export type GameHistoryMinAggregateInputType = {
    id?: true
    date?: true
    idPlayer1?: true
    idPlayer2?: true
    scorePlayer1?: true
    scorePlayer2?: true
    idWinner?: true
  }

  export type GameHistoryMaxAggregateInputType = {
    id?: true
    date?: true
    idPlayer1?: true
    idPlayer2?: true
    scorePlayer1?: true
    scorePlayer2?: true
    idWinner?: true
  }

  export type GameHistoryCountAggregateInputType = {
    id?: true
    date?: true
    idPlayer1?: true
    idPlayer2?: true
    scorePlayer1?: true
    scorePlayer2?: true
    idWinner?: true
    _all?: true
  }

  export type GameHistoryAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which gameHistory to aggregate.
     */
    where?: gameHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gameHistories to fetch.
     */
    orderBy?: gameHistoryOrderByWithRelationInput | gameHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: gameHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gameHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gameHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned gameHistories
    **/
    _count?: true | GameHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameHistoryMaxAggregateInputType
  }

  export type GetGameHistoryAggregateType<T extends GameHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateGameHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGameHistory[P]>
      : GetScalarType<T[P], AggregateGameHistory[P]>
  }




  export type gameHistoryGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: gameHistoryWhereInput
    orderBy?: gameHistoryOrderByWithAggregationInput | gameHistoryOrderByWithAggregationInput[]
    by: GameHistoryScalarFieldEnum[] | GameHistoryScalarFieldEnum
    having?: gameHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameHistoryCountAggregateInputType | true
    _avg?: GameHistoryAvgAggregateInputType
    _sum?: GameHistorySumAggregateInputType
    _min?: GameHistoryMinAggregateInputType
    _max?: GameHistoryMaxAggregateInputType
  }

  export type GameHistoryGroupByOutputType = {
    id: number
    date: Date
    idPlayer1: number
    idPlayer2: number
    scorePlayer1: number
    scorePlayer2: number
    idWinner: number
    _count: GameHistoryCountAggregateOutputType | null
    _avg: GameHistoryAvgAggregateOutputType | null
    _sum: GameHistorySumAggregateOutputType | null
    _min: GameHistoryMinAggregateOutputType | null
    _max: GameHistoryMaxAggregateOutputType | null
  }

  type GetGameHistoryGroupByPayload<T extends gameHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], GameHistoryGroupByOutputType[P]>
        }
      >
    >


  export type gameHistorySelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    idPlayer1?: boolean
    idPlayer2?: boolean
    scorePlayer1?: boolean
    scorePlayer2?: boolean
    idWinner?: boolean
  }, ExtArgs["result"]["gameHistory"]>

  export type gameHistorySelectScalar = {
    id?: boolean
    date?: boolean
    idPlayer1?: boolean
    idPlayer2?: boolean
    scorePlayer1?: boolean
    scorePlayer2?: boolean
    idWinner?: boolean
  }


  export type $gameHistoryPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "gameHistory"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: number
      date: Date
      idPlayer1: number
      idPlayer2: number
      scorePlayer1: number
      scorePlayer2: number
      idWinner: number
    }, ExtArgs["result"]["gameHistory"]>
    composites: {}
  }


  type gameHistoryGetPayload<S extends boolean | null | undefined | gameHistoryDefaultArgs> = $Result.GetResult<Prisma.$gameHistoryPayload, S>

  type gameHistoryCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<gameHistoryFindManyArgs, 'select' | 'include'> & {
      select?: GameHistoryCountAggregateInputType | true
    }

  export interface gameHistoryDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['gameHistory'], meta: { name: 'gameHistory' } }
    /**
     * Find zero or one GameHistory that matches the filter.
     * @param {gameHistoryFindUniqueArgs} args - Arguments to find a GameHistory
     * @example
     * // Get one GameHistory
     * const gameHistory = await prisma.gameHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends gameHistoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, gameHistoryFindUniqueArgs<ExtArgs>>
    ): Prisma__gameHistoryClient<$Result.GetResult<Prisma.$gameHistoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GameHistory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {gameHistoryFindUniqueOrThrowArgs} args - Arguments to find a GameHistory
     * @example
     * // Get one GameHistory
     * const gameHistory = await prisma.gameHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends gameHistoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, gameHistoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__gameHistoryClient<$Result.GetResult<Prisma.$gameHistoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GameHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameHistoryFindFirstArgs} args - Arguments to find a GameHistory
     * @example
     * // Get one GameHistory
     * const gameHistory = await prisma.gameHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends gameHistoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, gameHistoryFindFirstArgs<ExtArgs>>
    ): Prisma__gameHistoryClient<$Result.GetResult<Prisma.$gameHistoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GameHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameHistoryFindFirstOrThrowArgs} args - Arguments to find a GameHistory
     * @example
     * // Get one GameHistory
     * const gameHistory = await prisma.gameHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends gameHistoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, gameHistoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__gameHistoryClient<$Result.GetResult<Prisma.$gameHistoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GameHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameHistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GameHistories
     * const gameHistories = await prisma.gameHistory.findMany()
     * 
     * // Get first 10 GameHistories
     * const gameHistories = await prisma.gameHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameHistoryWithIdOnly = await prisma.gameHistory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends gameHistoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, gameHistoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gameHistoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GameHistory.
     * @param {gameHistoryCreateArgs} args - Arguments to create a GameHistory.
     * @example
     * // Create one GameHistory
     * const GameHistory = await prisma.gameHistory.create({
     *   data: {
     *     // ... data to create a GameHistory
     *   }
     * })
     * 
    **/
    create<T extends gameHistoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, gameHistoryCreateArgs<ExtArgs>>
    ): Prisma__gameHistoryClient<$Result.GetResult<Prisma.$gameHistoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GameHistories.
     *     @param {gameHistoryCreateManyArgs} args - Arguments to create many GameHistories.
     *     @example
     *     // Create many GameHistories
     *     const gameHistory = await prisma.gameHistory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends gameHistoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, gameHistoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GameHistory.
     * @param {gameHistoryDeleteArgs} args - Arguments to delete one GameHistory.
     * @example
     * // Delete one GameHistory
     * const GameHistory = await prisma.gameHistory.delete({
     *   where: {
     *     // ... filter to delete one GameHistory
     *   }
     * })
     * 
    **/
    delete<T extends gameHistoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, gameHistoryDeleteArgs<ExtArgs>>
    ): Prisma__gameHistoryClient<$Result.GetResult<Prisma.$gameHistoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GameHistory.
     * @param {gameHistoryUpdateArgs} args - Arguments to update one GameHistory.
     * @example
     * // Update one GameHistory
     * const gameHistory = await prisma.gameHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends gameHistoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, gameHistoryUpdateArgs<ExtArgs>>
    ): Prisma__gameHistoryClient<$Result.GetResult<Prisma.$gameHistoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GameHistories.
     * @param {gameHistoryDeleteManyArgs} args - Arguments to filter GameHistories to delete.
     * @example
     * // Delete a few GameHistories
     * const { count } = await prisma.gameHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends gameHistoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, gameHistoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GameHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GameHistories
     * const gameHistory = await prisma.gameHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends gameHistoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, gameHistoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GameHistory.
     * @param {gameHistoryUpsertArgs} args - Arguments to update or create a GameHistory.
     * @example
     * // Update or create a GameHistory
     * const gameHistory = await prisma.gameHistory.upsert({
     *   create: {
     *     // ... data to create a GameHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GameHistory we want to update
     *   }
     * })
    **/
    upsert<T extends gameHistoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, gameHistoryUpsertArgs<ExtArgs>>
    ): Prisma__gameHistoryClient<$Result.GetResult<Prisma.$gameHistoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GameHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameHistoryCountArgs} args - Arguments to filter GameHistories to count.
     * @example
     * // Count the number of GameHistories
     * const count = await prisma.gameHistory.count({
     *   where: {
     *     // ... the filter for the GameHistories we want to count
     *   }
     * })
    **/
    count<T extends gameHistoryCountArgs>(
      args?: Subset<T, gameHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GameHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameHistoryAggregateArgs>(args: Subset<T, GameHistoryAggregateArgs>): Prisma.PrismaPromise<GetGameHistoryAggregateType<T>>

    /**
     * Group by GameHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends gameHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: gameHistoryGroupByArgs['orderBy'] }
        : { orderBy?: gameHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, gameHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the gameHistory model
   */
  readonly fields: gameHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for gameHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__gameHistoryClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the gameHistory model
   */ 
  interface gameHistoryFieldRefs {
    readonly id: FieldRef<"gameHistory", 'Int'>
    readonly date: FieldRef<"gameHistory", 'DateTime'>
    readonly idPlayer1: FieldRef<"gameHistory", 'Int'>
    readonly idPlayer2: FieldRef<"gameHistory", 'Int'>
    readonly scorePlayer1: FieldRef<"gameHistory", 'Int'>
    readonly scorePlayer2: FieldRef<"gameHistory", 'Int'>
    readonly idWinner: FieldRef<"gameHistory", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * gameHistory findUnique
   */
  export type gameHistoryFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gameHistory
     */
    select?: gameHistorySelect<ExtArgs> | null
    /**
     * Filter, which gameHistory to fetch.
     */
    where: gameHistoryWhereUniqueInput
  }


  /**
   * gameHistory findUniqueOrThrow
   */
  export type gameHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gameHistory
     */
    select?: gameHistorySelect<ExtArgs> | null
    /**
     * Filter, which gameHistory to fetch.
     */
    where: gameHistoryWhereUniqueInput
  }


  /**
   * gameHistory findFirst
   */
  export type gameHistoryFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gameHistory
     */
    select?: gameHistorySelect<ExtArgs> | null
    /**
     * Filter, which gameHistory to fetch.
     */
    where?: gameHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gameHistories to fetch.
     */
    orderBy?: gameHistoryOrderByWithRelationInput | gameHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for gameHistories.
     */
    cursor?: gameHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gameHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gameHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of gameHistories.
     */
    distinct?: GameHistoryScalarFieldEnum | GameHistoryScalarFieldEnum[]
  }


  /**
   * gameHistory findFirstOrThrow
   */
  export type gameHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gameHistory
     */
    select?: gameHistorySelect<ExtArgs> | null
    /**
     * Filter, which gameHistory to fetch.
     */
    where?: gameHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gameHistories to fetch.
     */
    orderBy?: gameHistoryOrderByWithRelationInput | gameHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for gameHistories.
     */
    cursor?: gameHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gameHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gameHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of gameHistories.
     */
    distinct?: GameHistoryScalarFieldEnum | GameHistoryScalarFieldEnum[]
  }


  /**
   * gameHistory findMany
   */
  export type gameHistoryFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gameHistory
     */
    select?: gameHistorySelect<ExtArgs> | null
    /**
     * Filter, which gameHistories to fetch.
     */
    where?: gameHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of gameHistories to fetch.
     */
    orderBy?: gameHistoryOrderByWithRelationInput | gameHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing gameHistories.
     */
    cursor?: gameHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` gameHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` gameHistories.
     */
    skip?: number
    distinct?: GameHistoryScalarFieldEnum | GameHistoryScalarFieldEnum[]
  }


  /**
   * gameHistory create
   */
  export type gameHistoryCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gameHistory
     */
    select?: gameHistorySelect<ExtArgs> | null
    /**
     * The data needed to create a gameHistory.
     */
    data: XOR<gameHistoryCreateInput, gameHistoryUncheckedCreateInput>
  }


  /**
   * gameHistory createMany
   */
  export type gameHistoryCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many gameHistories.
     */
    data: gameHistoryCreateManyInput | gameHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * gameHistory update
   */
  export type gameHistoryUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gameHistory
     */
    select?: gameHistorySelect<ExtArgs> | null
    /**
     * The data needed to update a gameHistory.
     */
    data: XOR<gameHistoryUpdateInput, gameHistoryUncheckedUpdateInput>
    /**
     * Choose, which gameHistory to update.
     */
    where: gameHistoryWhereUniqueInput
  }


  /**
   * gameHistory updateMany
   */
  export type gameHistoryUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update gameHistories.
     */
    data: XOR<gameHistoryUpdateManyMutationInput, gameHistoryUncheckedUpdateManyInput>
    /**
     * Filter which gameHistories to update
     */
    where?: gameHistoryWhereInput
  }


  /**
   * gameHistory upsert
   */
  export type gameHistoryUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gameHistory
     */
    select?: gameHistorySelect<ExtArgs> | null
    /**
     * The filter to search for the gameHistory to update in case it exists.
     */
    where: gameHistoryWhereUniqueInput
    /**
     * In case the gameHistory found by the `where` argument doesn't exist, create a new gameHistory with this data.
     */
    create: XOR<gameHistoryCreateInput, gameHistoryUncheckedCreateInput>
    /**
     * In case the gameHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<gameHistoryUpdateInput, gameHistoryUncheckedUpdateInput>
  }


  /**
   * gameHistory delete
   */
  export type gameHistoryDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gameHistory
     */
    select?: gameHistorySelect<ExtArgs> | null
    /**
     * Filter which gameHistory to delete.
     */
    where: gameHistoryWhereUniqueInput
  }


  /**
   * gameHistory deleteMany
   */
  export type gameHistoryDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which gameHistories to delete
     */
    where?: gameHistoryWhereInput
  }


  /**
   * gameHistory without action
   */
  export type gameHistoryDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the gameHistory
     */
    select?: gameHistorySelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    email: 'email',
    username: 'username',
    isLogged: 'isLogged',
    inChat: 'inChat',
    inGame: 'inGame',
    gamesWon: 'gamesWon',
    gamesLost: 'gamesLost',
    score: 'score',
    userSecret: 'userSecret',
    avatarId: 'avatarId',
    IstwoFactorAuth: 'IstwoFactorAuth',
    IsSigninWith42: 'IsSigninWith42',
    hash: 'hash',
    hashedRt: 'hashedRt',
    blockedIds: 'blockedIds',
    achievementChat: 'achievementChat',
    achievementPong: 'achievementPong',
    achievementAvatar: 'achievementAvatar'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FriendsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    friendId: 'friendId'
  };

  export type FriendsScalarFieldEnum = (typeof FriendsScalarFieldEnum)[keyof typeof FriendsScalarFieldEnum]


  export const AvatarScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    data: 'data',
    userId: 'userId',
    url42: 'url42'
  };

  export type AvatarScalarFieldEnum = (typeof AvatarScalarFieldEnum)[keyof typeof AvatarScalarFieldEnum]


  export const ChannelScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    password: 'password',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChannelScalarFieldEnum = (typeof ChannelScalarFieldEnum)[keyof typeof ChannelScalarFieldEnum]


  export const ChannelUserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    channelId: 'channelId',
    role: 'role',
    socketIds: 'socketIds'
  };

  export type ChannelUserScalarFieldEnum = (typeof ChannelUserScalarFieldEnum)[keyof typeof ChannelUserScalarFieldEnum]


  export const ChannelMessageScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    channelId: 'channelId',
    fromUserId: 'fromUserId',
    message: 'message'
  };

  export type ChannelMessageScalarFieldEnum = (typeof ChannelMessageScalarFieldEnum)[keyof typeof ChannelMessageScalarFieldEnum]


  export const SourceBansScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    channelId: 'channelId',
    adminUsername: 'adminUsername',
    type: 'type',
    createdAt: 'createdAt',
    expireAt: 'expireAt',
    duration: 'duration',
    reason: 'reason'
  };

  export type SourceBansScalarFieldEnum = (typeof SourceBansScalarFieldEnum)[keyof typeof SourceBansScalarFieldEnum]


  export const RunningamesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    idPlayer1: 'idPlayer1',
    idPlayer2: 'idPlayer2',
    hardMode: 'hardMode',
    isReadInPongModule: 'isReadInPongModule'
  };

  export type RunningamesScalarFieldEnum = (typeof RunningamesScalarFieldEnum)[keyof typeof RunningamesScalarFieldEnum]


  export const GameHistoryScalarFieldEnum: {
    id: 'id',
    date: 'date',
    idPlayer1: 'idPlayer1',
    idPlayer2: 'idPlayer2',
    scorePlayer1: 'scorePlayer1',
    scorePlayer2: 'scorePlayer2',
    idWinner: 'idWinner'
  };

  export type GameHistoryScalarFieldEnum = (typeof GameHistoryScalarFieldEnum)[keyof typeof GameHistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'ChannelType'
   */
  export type EnumChannelTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChannelType'>
    


  /**
   * Reference to a field of type 'ChannelType[]'
   */
  export type ListEnumChannelTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChannelType[]'>
    


  /**
   * Reference to a field of type 'ChannelUserRole'
   */
  export type EnumChannelUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChannelUserRole'>
    


  /**
   * Reference to a field of type 'ChannelUserRole[]'
   */
  export type ListEnumChannelUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ChannelUserRole[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    isLogged?: BoolFilter<"User"> | boolean
    inChat?: BoolFilter<"User"> | boolean
    inGame?: BoolFilter<"User"> | boolean
    gamesWon?: IntFilter<"User"> | number
    gamesLost?: IntFilter<"User"> | number
    score?: IntFilter<"User"> | number
    userSecret?: StringNullableFilter<"User"> | string | null
    avatarId?: IntNullableFilter<"User"> | number | null
    IstwoFactorAuth?: BoolFilter<"User"> | boolean
    IsSigninWith42?: BoolFilter<"User"> | boolean
    hash?: StringNullableFilter<"User"> | string | null
    hashedRt?: StringNullableFilter<"User"> | string | null
    blockedIds?: IntNullableListFilter<"User">
    achievementChat?: BoolFilter<"User"> | boolean
    achievementPong?: BoolFilter<"User"> | boolean
    achievementAvatar?: BoolFilter<"User"> | boolean
    avatar?: XOR<AvatarNullableRelationFilter, AvatarWhereInput> | null
    message?: ChannelMessageListRelationFilter
    channelUser?: ChannelUserListRelationFilter
    friends?: FriendsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    isLogged?: SortOrder
    inChat?: SortOrder
    inGame?: SortOrder
    gamesWon?: SortOrder
    gamesLost?: SortOrder
    score?: SortOrder
    userSecret?: SortOrderInput | SortOrder
    avatarId?: SortOrderInput | SortOrder
    IstwoFactorAuth?: SortOrder
    IsSigninWith42?: SortOrder
    hash?: SortOrderInput | SortOrder
    hashedRt?: SortOrderInput | SortOrder
    blockedIds?: SortOrder
    achievementChat?: SortOrder
    achievementPong?: SortOrder
    achievementAvatar?: SortOrder
    avatar?: AvatarOrderByWithRelationInput
    message?: ChannelMessageOrderByRelationAggregateInput
    channelUser?: ChannelUserOrderByRelationAggregateInput
    friends?: FriendsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    isLogged?: BoolFilter<"User"> | boolean
    inChat?: BoolFilter<"User"> | boolean
    inGame?: BoolFilter<"User"> | boolean
    gamesWon?: IntFilter<"User"> | number
    gamesLost?: IntFilter<"User"> | number
    score?: IntFilter<"User"> | number
    userSecret?: StringNullableFilter<"User"> | string | null
    avatarId?: IntNullableFilter<"User"> | number | null
    IstwoFactorAuth?: BoolFilter<"User"> | boolean
    IsSigninWith42?: BoolFilter<"User"> | boolean
    hash?: StringNullableFilter<"User"> | string | null
    hashedRt?: StringNullableFilter<"User"> | string | null
    blockedIds?: IntNullableListFilter<"User">
    achievementChat?: BoolFilter<"User"> | boolean
    achievementPong?: BoolFilter<"User"> | boolean
    achievementAvatar?: BoolFilter<"User"> | boolean
    avatar?: XOR<AvatarNullableRelationFilter, AvatarWhereInput> | null
    message?: ChannelMessageListRelationFilter
    channelUser?: ChannelUserListRelationFilter
    friends?: FriendsListRelationFilter
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    isLogged?: SortOrder
    inChat?: SortOrder
    inGame?: SortOrder
    gamesWon?: SortOrder
    gamesLost?: SortOrder
    score?: SortOrder
    userSecret?: SortOrderInput | SortOrder
    avatarId?: SortOrderInput | SortOrder
    IstwoFactorAuth?: SortOrder
    IsSigninWith42?: SortOrder
    hash?: SortOrderInput | SortOrder
    hashedRt?: SortOrderInput | SortOrder
    blockedIds?: SortOrder
    achievementChat?: SortOrder
    achievementPong?: SortOrder
    achievementAvatar?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    isLogged?: BoolWithAggregatesFilter<"User"> | boolean
    inChat?: BoolWithAggregatesFilter<"User"> | boolean
    inGame?: BoolWithAggregatesFilter<"User"> | boolean
    gamesWon?: IntWithAggregatesFilter<"User"> | number
    gamesLost?: IntWithAggregatesFilter<"User"> | number
    score?: IntWithAggregatesFilter<"User"> | number
    userSecret?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarId?: IntNullableWithAggregatesFilter<"User"> | number | null
    IstwoFactorAuth?: BoolWithAggregatesFilter<"User"> | boolean
    IsSigninWith42?: BoolWithAggregatesFilter<"User"> | boolean
    hash?: StringNullableWithAggregatesFilter<"User"> | string | null
    hashedRt?: StringNullableWithAggregatesFilter<"User"> | string | null
    blockedIds?: IntNullableListFilter<"User">
    achievementChat?: BoolWithAggregatesFilter<"User"> | boolean
    achievementPong?: BoolWithAggregatesFilter<"User"> | boolean
    achievementAvatar?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type FriendsWhereInput = {
    AND?: FriendsWhereInput | FriendsWhereInput[]
    OR?: FriendsWhereInput[]
    NOT?: FriendsWhereInput | FriendsWhereInput[]
    id?: IntFilter<"Friends"> | number
    userId?: IntFilter<"Friends"> | number
    friendId?: IntFilter<"Friends"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FriendsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type FriendsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FriendsWhereInput | FriendsWhereInput[]
    OR?: FriendsWhereInput[]
    NOT?: FriendsWhereInput | FriendsWhereInput[]
    userId?: IntFilter<"Friends"> | number
    friendId?: IntFilter<"Friends"> | number
    User?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type FriendsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
    _count?: FriendsCountOrderByAggregateInput
    _avg?: FriendsAvgOrderByAggregateInput
    _max?: FriendsMaxOrderByAggregateInput
    _min?: FriendsMinOrderByAggregateInput
    _sum?: FriendsSumOrderByAggregateInput
  }

  export type FriendsScalarWhereWithAggregatesInput = {
    AND?: FriendsScalarWhereWithAggregatesInput | FriendsScalarWhereWithAggregatesInput[]
    OR?: FriendsScalarWhereWithAggregatesInput[]
    NOT?: FriendsScalarWhereWithAggregatesInput | FriendsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Friends"> | number
    userId?: IntWithAggregatesFilter<"Friends"> | number
    friendId?: IntWithAggregatesFilter<"Friends"> | number
  }

  export type AvatarWhereInput = {
    AND?: AvatarWhereInput | AvatarWhereInput[]
    OR?: AvatarWhereInput[]
    NOT?: AvatarWhereInput | AvatarWhereInput[]
    id?: IntFilter<"Avatar"> | number
    filename?: StringFilter<"Avatar"> | string
    data?: BytesFilter<"Avatar"> | Buffer
    userId?: IntFilter<"Avatar"> | number
    url42?: StringNullableFilter<"Avatar"> | string | null
    User?: UserListRelationFilter
  }

  export type AvatarOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    data?: SortOrder
    userId?: SortOrder
    url42?: SortOrderInput | SortOrder
    User?: UserOrderByRelationAggregateInput
  }

  export type AvatarWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AvatarWhereInput | AvatarWhereInput[]
    OR?: AvatarWhereInput[]
    NOT?: AvatarWhereInput | AvatarWhereInput[]
    filename?: StringFilter<"Avatar"> | string
    data?: BytesFilter<"Avatar"> | Buffer
    userId?: IntFilter<"Avatar"> | number
    url42?: StringNullableFilter<"Avatar"> | string | null
    User?: UserListRelationFilter
  }, "id">

  export type AvatarOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    data?: SortOrder
    userId?: SortOrder
    url42?: SortOrderInput | SortOrder
    _count?: AvatarCountOrderByAggregateInput
    _avg?: AvatarAvgOrderByAggregateInput
    _max?: AvatarMaxOrderByAggregateInput
    _min?: AvatarMinOrderByAggregateInput
    _sum?: AvatarSumOrderByAggregateInput
  }

  export type AvatarScalarWhereWithAggregatesInput = {
    AND?: AvatarScalarWhereWithAggregatesInput | AvatarScalarWhereWithAggregatesInput[]
    OR?: AvatarScalarWhereWithAggregatesInput[]
    NOT?: AvatarScalarWhereWithAggregatesInput | AvatarScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Avatar"> | number
    filename?: StringWithAggregatesFilter<"Avatar"> | string
    data?: BytesWithAggregatesFilter<"Avatar"> | Buffer
    userId?: IntWithAggregatesFilter<"Avatar"> | number
    url42?: StringNullableWithAggregatesFilter<"Avatar"> | string | null
  }

  export type ChannelWhereInput = {
    AND?: ChannelWhereInput | ChannelWhereInput[]
    OR?: ChannelWhereInput[]
    NOT?: ChannelWhereInput | ChannelWhereInput[]
    id?: IntFilter<"Channel"> | number
    name?: StringNullableFilter<"Channel"> | string | null
    description?: StringNullableFilter<"Channel"> | string | null
    password?: StringNullableFilter<"Channel"> | string | null
    type?: EnumChannelTypeFilter<"Channel"> | $Enums.ChannelType
    createdAt?: DateTimeFilter<"Channel"> | Date | string
    updatedAt?: DateTimeFilter<"Channel"> | Date | string
    messages?: ChannelMessageListRelationFilter
    channelUsers?: ChannelUserListRelationFilter
  }

  export type ChannelOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    messages?: ChannelMessageOrderByRelationAggregateInput
    channelUsers?: ChannelUserOrderByRelationAggregateInput
  }

  export type ChannelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChannelWhereInput | ChannelWhereInput[]
    OR?: ChannelWhereInput[]
    NOT?: ChannelWhereInput | ChannelWhereInput[]
    name?: StringNullableFilter<"Channel"> | string | null
    description?: StringNullableFilter<"Channel"> | string | null
    password?: StringNullableFilter<"Channel"> | string | null
    type?: EnumChannelTypeFilter<"Channel"> | $Enums.ChannelType
    createdAt?: DateTimeFilter<"Channel"> | Date | string
    updatedAt?: DateTimeFilter<"Channel"> | Date | string
    messages?: ChannelMessageListRelationFilter
    channelUsers?: ChannelUserListRelationFilter
  }, "id">

  export type ChannelOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChannelCountOrderByAggregateInput
    _avg?: ChannelAvgOrderByAggregateInput
    _max?: ChannelMaxOrderByAggregateInput
    _min?: ChannelMinOrderByAggregateInput
    _sum?: ChannelSumOrderByAggregateInput
  }

  export type ChannelScalarWhereWithAggregatesInput = {
    AND?: ChannelScalarWhereWithAggregatesInput | ChannelScalarWhereWithAggregatesInput[]
    OR?: ChannelScalarWhereWithAggregatesInput[]
    NOT?: ChannelScalarWhereWithAggregatesInput | ChannelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Channel"> | number
    name?: StringNullableWithAggregatesFilter<"Channel"> | string | null
    description?: StringNullableWithAggregatesFilter<"Channel"> | string | null
    password?: StringNullableWithAggregatesFilter<"Channel"> | string | null
    type?: EnumChannelTypeWithAggregatesFilter<"Channel"> | $Enums.ChannelType
    createdAt?: DateTimeWithAggregatesFilter<"Channel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Channel"> | Date | string
  }

  export type ChannelUserWhereInput = {
    AND?: ChannelUserWhereInput | ChannelUserWhereInput[]
    OR?: ChannelUserWhereInput[]
    NOT?: ChannelUserWhereInput | ChannelUserWhereInput[]
    id?: IntFilter<"ChannelUser"> | number
    userId?: IntFilter<"ChannelUser"> | number
    channelId?: IntFilter<"ChannelUser"> | number
    role?: EnumChannelUserRoleFilter<"ChannelUser"> | $Enums.ChannelUserRole
    socketIds?: StringNullableListFilter<"ChannelUser">
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type ChannelUserOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    role?: SortOrder
    socketIds?: SortOrder
    user?: UserOrderByWithRelationInput
    channel?: ChannelOrderByWithRelationInput
  }

  export type ChannelUserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChannelUserWhereInput | ChannelUserWhereInput[]
    OR?: ChannelUserWhereInput[]
    NOT?: ChannelUserWhereInput | ChannelUserWhereInput[]
    userId?: IntFilter<"ChannelUser"> | number
    channelId?: IntFilter<"ChannelUser"> | number
    role?: EnumChannelUserRoleFilter<"ChannelUser"> | $Enums.ChannelUserRole
    socketIds?: StringNullableListFilter<"ChannelUser">
    user?: XOR<UserRelationFilter, UserWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }, "id">

  export type ChannelUserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    role?: SortOrder
    socketIds?: SortOrder
    _count?: ChannelUserCountOrderByAggregateInput
    _avg?: ChannelUserAvgOrderByAggregateInput
    _max?: ChannelUserMaxOrderByAggregateInput
    _min?: ChannelUserMinOrderByAggregateInput
    _sum?: ChannelUserSumOrderByAggregateInput
  }

  export type ChannelUserScalarWhereWithAggregatesInput = {
    AND?: ChannelUserScalarWhereWithAggregatesInput | ChannelUserScalarWhereWithAggregatesInput[]
    OR?: ChannelUserScalarWhereWithAggregatesInput[]
    NOT?: ChannelUserScalarWhereWithAggregatesInput | ChannelUserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChannelUser"> | number
    userId?: IntWithAggregatesFilter<"ChannelUser"> | number
    channelId?: IntWithAggregatesFilter<"ChannelUser"> | number
    role?: EnumChannelUserRoleWithAggregatesFilter<"ChannelUser"> | $Enums.ChannelUserRole
    socketIds?: StringNullableListFilter<"ChannelUser">
  }

  export type ChannelMessageWhereInput = {
    AND?: ChannelMessageWhereInput | ChannelMessageWhereInput[]
    OR?: ChannelMessageWhereInput[]
    NOT?: ChannelMessageWhereInput | ChannelMessageWhereInput[]
    id?: IntFilter<"ChannelMessage"> | number
    createdAt?: DateTimeFilter<"ChannelMessage"> | Date | string
    channelId?: IntFilter<"ChannelMessage"> | number
    fromUserId?: IntFilter<"ChannelMessage"> | number
    message?: StringFilter<"ChannelMessage"> | string
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
    fromUser?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ChannelMessageOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    channelId?: SortOrder
    fromUserId?: SortOrder
    message?: SortOrder
    channel?: ChannelOrderByWithRelationInput
    fromUser?: UserOrderByWithRelationInput
  }

  export type ChannelMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChannelMessageWhereInput | ChannelMessageWhereInput[]
    OR?: ChannelMessageWhereInput[]
    NOT?: ChannelMessageWhereInput | ChannelMessageWhereInput[]
    createdAt?: DateTimeFilter<"ChannelMessage"> | Date | string
    channelId?: IntFilter<"ChannelMessage"> | number
    fromUserId?: IntFilter<"ChannelMessage"> | number
    message?: StringFilter<"ChannelMessage"> | string
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
    fromUser?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ChannelMessageOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    channelId?: SortOrder
    fromUserId?: SortOrder
    message?: SortOrder
    _count?: ChannelMessageCountOrderByAggregateInput
    _avg?: ChannelMessageAvgOrderByAggregateInput
    _max?: ChannelMessageMaxOrderByAggregateInput
    _min?: ChannelMessageMinOrderByAggregateInput
    _sum?: ChannelMessageSumOrderByAggregateInput
  }

  export type ChannelMessageScalarWhereWithAggregatesInput = {
    AND?: ChannelMessageScalarWhereWithAggregatesInput | ChannelMessageScalarWhereWithAggregatesInput[]
    OR?: ChannelMessageScalarWhereWithAggregatesInput[]
    NOT?: ChannelMessageScalarWhereWithAggregatesInput | ChannelMessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChannelMessage"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ChannelMessage"> | Date | string
    channelId?: IntWithAggregatesFilter<"ChannelMessage"> | number
    fromUserId?: IntWithAggregatesFilter<"ChannelMessage"> | number
    message?: StringWithAggregatesFilter<"ChannelMessage"> | string
  }

  export type SourceBansWhereInput = {
    AND?: SourceBansWhereInput | SourceBansWhereInput[]
    OR?: SourceBansWhereInput[]
    NOT?: SourceBansWhereInput | SourceBansWhereInput[]
    id?: IntFilter<"SourceBans"> | number
    userId?: IntFilter<"SourceBans"> | number
    channelId?: IntFilter<"SourceBans"> | number
    adminUsername?: StringFilter<"SourceBans"> | string
    type?: StringFilter<"SourceBans"> | string
    createdAt?: DateTimeFilter<"SourceBans"> | Date | string
    expireAt?: DateTimeFilter<"SourceBans"> | Date | string
    duration?: IntFilter<"SourceBans"> | number
    reason?: StringFilter<"SourceBans"> | string
  }

  export type SourceBansOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    adminUsername?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    expireAt?: SortOrder
    duration?: SortOrder
    reason?: SortOrder
  }

  export type SourceBansWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SourceBansWhereInput | SourceBansWhereInput[]
    OR?: SourceBansWhereInput[]
    NOT?: SourceBansWhereInput | SourceBansWhereInput[]
    userId?: IntFilter<"SourceBans"> | number
    channelId?: IntFilter<"SourceBans"> | number
    adminUsername?: StringFilter<"SourceBans"> | string
    type?: StringFilter<"SourceBans"> | string
    createdAt?: DateTimeFilter<"SourceBans"> | Date | string
    expireAt?: DateTimeFilter<"SourceBans"> | Date | string
    duration?: IntFilter<"SourceBans"> | number
    reason?: StringFilter<"SourceBans"> | string
  }, "id">

  export type SourceBansOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    adminUsername?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    expireAt?: SortOrder
    duration?: SortOrder
    reason?: SortOrder
    _count?: SourceBansCountOrderByAggregateInput
    _avg?: SourceBansAvgOrderByAggregateInput
    _max?: SourceBansMaxOrderByAggregateInput
    _min?: SourceBansMinOrderByAggregateInput
    _sum?: SourceBansSumOrderByAggregateInput
  }

  export type SourceBansScalarWhereWithAggregatesInput = {
    AND?: SourceBansScalarWhereWithAggregatesInput | SourceBansScalarWhereWithAggregatesInput[]
    OR?: SourceBansScalarWhereWithAggregatesInput[]
    NOT?: SourceBansScalarWhereWithAggregatesInput | SourceBansScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SourceBans"> | number
    userId?: IntWithAggregatesFilter<"SourceBans"> | number
    channelId?: IntWithAggregatesFilter<"SourceBans"> | number
    adminUsername?: StringWithAggregatesFilter<"SourceBans"> | string
    type?: StringWithAggregatesFilter<"SourceBans"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SourceBans"> | Date | string
    expireAt?: DateTimeWithAggregatesFilter<"SourceBans"> | Date | string
    duration?: IntWithAggregatesFilter<"SourceBans"> | number
    reason?: StringWithAggregatesFilter<"SourceBans"> | string
  }

  export type runningamesWhereInput = {
    AND?: runningamesWhereInput | runningamesWhereInput[]
    OR?: runningamesWhereInput[]
    NOT?: runningamesWhereInput | runningamesWhereInput[]
    id?: IntFilter<"runningames"> | number
    name?: StringFilter<"runningames"> | string
    idPlayer1?: IntFilter<"runningames"> | number
    idPlayer2?: IntFilter<"runningames"> | number
    hardMode?: BoolFilter<"runningames"> | boolean
    isReadInPongModule?: BoolFilter<"runningames"> | boolean
  }

  export type runningamesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
    hardMode?: SortOrder
    isReadInPongModule?: SortOrder
  }

  export type runningamesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: runningamesWhereInput | runningamesWhereInput[]
    OR?: runningamesWhereInput[]
    NOT?: runningamesWhereInput | runningamesWhereInput[]
    name?: StringFilter<"runningames"> | string
    idPlayer1?: IntFilter<"runningames"> | number
    idPlayer2?: IntFilter<"runningames"> | number
    hardMode?: BoolFilter<"runningames"> | boolean
    isReadInPongModule?: BoolFilter<"runningames"> | boolean
  }, "id">

  export type runningamesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
    hardMode?: SortOrder
    isReadInPongModule?: SortOrder
    _count?: runningamesCountOrderByAggregateInput
    _avg?: runningamesAvgOrderByAggregateInput
    _max?: runningamesMaxOrderByAggregateInput
    _min?: runningamesMinOrderByAggregateInput
    _sum?: runningamesSumOrderByAggregateInput
  }

  export type runningamesScalarWhereWithAggregatesInput = {
    AND?: runningamesScalarWhereWithAggregatesInput | runningamesScalarWhereWithAggregatesInput[]
    OR?: runningamesScalarWhereWithAggregatesInput[]
    NOT?: runningamesScalarWhereWithAggregatesInput | runningamesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"runningames"> | number
    name?: StringWithAggregatesFilter<"runningames"> | string
    idPlayer1?: IntWithAggregatesFilter<"runningames"> | number
    idPlayer2?: IntWithAggregatesFilter<"runningames"> | number
    hardMode?: BoolWithAggregatesFilter<"runningames"> | boolean
    isReadInPongModule?: BoolWithAggregatesFilter<"runningames"> | boolean
  }

  export type gameHistoryWhereInput = {
    AND?: gameHistoryWhereInput | gameHistoryWhereInput[]
    OR?: gameHistoryWhereInput[]
    NOT?: gameHistoryWhereInput | gameHistoryWhereInput[]
    id?: IntFilter<"gameHistory"> | number
    date?: DateTimeFilter<"gameHistory"> | Date | string
    idPlayer1?: IntFilter<"gameHistory"> | number
    idPlayer2?: IntFilter<"gameHistory"> | number
    scorePlayer1?: IntFilter<"gameHistory"> | number
    scorePlayer2?: IntFilter<"gameHistory"> | number
    idWinner?: IntFilter<"gameHistory"> | number
  }

  export type gameHistoryOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
    scorePlayer1?: SortOrder
    scorePlayer2?: SortOrder
    idWinner?: SortOrder
  }

  export type gameHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: gameHistoryWhereInput | gameHistoryWhereInput[]
    OR?: gameHistoryWhereInput[]
    NOT?: gameHistoryWhereInput | gameHistoryWhereInput[]
    date?: DateTimeFilter<"gameHistory"> | Date | string
    idPlayer1?: IntFilter<"gameHistory"> | number
    idPlayer2?: IntFilter<"gameHistory"> | number
    scorePlayer1?: IntFilter<"gameHistory"> | number
    scorePlayer2?: IntFilter<"gameHistory"> | number
    idWinner?: IntFilter<"gameHistory"> | number
  }, "id">

  export type gameHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
    scorePlayer1?: SortOrder
    scorePlayer2?: SortOrder
    idWinner?: SortOrder
    _count?: gameHistoryCountOrderByAggregateInput
    _avg?: gameHistoryAvgOrderByAggregateInput
    _max?: gameHistoryMaxOrderByAggregateInput
    _min?: gameHistoryMinOrderByAggregateInput
    _sum?: gameHistorySumOrderByAggregateInput
  }

  export type gameHistoryScalarWhereWithAggregatesInput = {
    AND?: gameHistoryScalarWhereWithAggregatesInput | gameHistoryScalarWhereWithAggregatesInput[]
    OR?: gameHistoryScalarWhereWithAggregatesInput[]
    NOT?: gameHistoryScalarWhereWithAggregatesInput | gameHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"gameHistory"> | number
    date?: DateTimeWithAggregatesFilter<"gameHistory"> | Date | string
    idPlayer1?: IntWithAggregatesFilter<"gameHistory"> | number
    idPlayer2?: IntWithAggregatesFilter<"gameHistory"> | number
    scorePlayer1?: IntWithAggregatesFilter<"gameHistory"> | number
    scorePlayer2?: IntWithAggregatesFilter<"gameHistory"> | number
    idWinner?: IntWithAggregatesFilter<"gameHistory"> | number
  }

  export type UserCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon?: number
    gamesLost?: number
    score?: number
    userSecret?: string | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash?: string | null
    hashedRt?: string | null
    blockedIds?: UserCreateblockedIdsInput | number[]
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
    avatar?: AvatarCreateNestedOneWithoutUserInput
    message?: ChannelMessageCreateNestedManyWithoutFromUserInput
    channelUser?: ChannelUserCreateNestedManyWithoutUserInput
    friends?: FriendsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon?: number
    gamesLost?: number
    score?: number
    userSecret?: string | null
    avatarId?: number | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash?: string | null
    hashedRt?: string | null
    blockedIds?: UserCreateblockedIdsInput | number[]
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
    message?: ChannelMessageUncheckedCreateNestedManyWithoutFromUserInput
    channelUser?: ChannelUserUncheckedCreateNestedManyWithoutUserInput
    friends?: FriendsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
    avatar?: AvatarUpdateOneWithoutUserNestedInput
    message?: ChannelMessageUpdateManyWithoutFromUserNestedInput
    channelUser?: ChannelUserUpdateManyWithoutUserNestedInput
    friends?: FriendsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    avatarId?: NullableIntFieldUpdateOperationsInput | number | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
    message?: ChannelMessageUncheckedUpdateManyWithoutFromUserNestedInput
    channelUser?: ChannelUserUncheckedUpdateManyWithoutUserNestedInput
    friends?: FriendsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon?: number
    gamesLost?: number
    score?: number
    userSecret?: string | null
    avatarId?: number | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash?: string | null
    hashedRt?: string | null
    blockedIds?: UserCreateblockedIdsInput | number[]
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
  }

  export type UserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    avatarId?: NullableIntFieldUpdateOperationsInput | number | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FriendsCreateInput = {
    friendId: number
    User: UserCreateNestedOneWithoutFriendsInput
  }

  export type FriendsUncheckedCreateInput = {
    id?: number
    userId: number
    friendId: number
  }

  export type FriendsUpdateInput = {
    friendId?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutFriendsNestedInput
  }

  export type FriendsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    friendId?: IntFieldUpdateOperationsInput | number
  }

  export type FriendsCreateManyInput = {
    id?: number
    userId: number
    friendId: number
  }

  export type FriendsUpdateManyMutationInput = {
    friendId?: IntFieldUpdateOperationsInput | number
  }

  export type FriendsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    friendId?: IntFieldUpdateOperationsInput | number
  }

  export type AvatarCreateInput = {
    filename: string
    data: Buffer
    userId: number
    url42?: string | null
    User?: UserCreateNestedManyWithoutAvatarInput
  }

  export type AvatarUncheckedCreateInput = {
    id?: number
    filename: string
    data: Buffer
    userId: number
    url42?: string | null
    User?: UserUncheckedCreateNestedManyWithoutAvatarInput
  }

  export type AvatarUpdateInput = {
    filename?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    userId?: IntFieldUpdateOperationsInput | number
    url42?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateManyWithoutAvatarNestedInput
  }

  export type AvatarUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    userId?: IntFieldUpdateOperationsInput | number
    url42?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUncheckedUpdateManyWithoutAvatarNestedInput
  }

  export type AvatarCreateManyInput = {
    id?: number
    filename: string
    data: Buffer
    userId: number
    url42?: string | null
  }

  export type AvatarUpdateManyMutationInput = {
    filename?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    userId?: IntFieldUpdateOperationsInput | number
    url42?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AvatarUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    userId?: IntFieldUpdateOperationsInput | number
    url42?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChannelCreateInput = {
    name?: string | null
    description?: string | null
    password?: string | null
    type: $Enums.ChannelType
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChannelMessageCreateNestedManyWithoutChannelInput
    channelUsers?: ChannelUserCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateInput = {
    id?: number
    name?: string | null
    description?: string | null
    password?: string | null
    type: $Enums.ChannelType
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChannelMessageUncheckedCreateNestedManyWithoutChannelInput
    channelUsers?: ChannelUserUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChannelMessageUpdateManyWithoutChannelNestedInput
    channelUsers?: ChannelUserUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChannelMessageUncheckedUpdateManyWithoutChannelNestedInput
    channelUsers?: ChannelUserUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateManyInput = {
    id?: number
    name?: string | null
    description?: string | null
    password?: string | null
    type: $Enums.ChannelType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChannelUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChannelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChannelUserCreateInput = {
    role: $Enums.ChannelUserRole
    socketIds?: ChannelUserCreatesocketIdsInput | string[]
    user: UserCreateNestedOneWithoutChannelUserInput
    channel: ChannelCreateNestedOneWithoutChannelUsersInput
  }

  export type ChannelUserUncheckedCreateInput = {
    id?: number
    userId: number
    channelId: number
    role: $Enums.ChannelUserRole
    socketIds?: ChannelUserCreatesocketIdsInput | string[]
  }

  export type ChannelUserUpdateInput = {
    role?: EnumChannelUserRoleFieldUpdateOperationsInput | $Enums.ChannelUserRole
    socketIds?: ChannelUserUpdatesocketIdsInput | string[]
    user?: UserUpdateOneRequiredWithoutChannelUserNestedInput
    channel?: ChannelUpdateOneRequiredWithoutChannelUsersNestedInput
  }

  export type ChannelUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    role?: EnumChannelUserRoleFieldUpdateOperationsInput | $Enums.ChannelUserRole
    socketIds?: ChannelUserUpdatesocketIdsInput | string[]
  }

  export type ChannelUserCreateManyInput = {
    id?: number
    userId: number
    channelId: number
    role: $Enums.ChannelUserRole
    socketIds?: ChannelUserCreatesocketIdsInput | string[]
  }

  export type ChannelUserUpdateManyMutationInput = {
    role?: EnumChannelUserRoleFieldUpdateOperationsInput | $Enums.ChannelUserRole
    socketIds?: ChannelUserUpdatesocketIdsInput | string[]
  }

  export type ChannelUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    role?: EnumChannelUserRoleFieldUpdateOperationsInput | $Enums.ChannelUserRole
    socketIds?: ChannelUserUpdatesocketIdsInput | string[]
  }

  export type ChannelMessageCreateInput = {
    createdAt?: Date | string
    message: string
    channel: ChannelCreateNestedOneWithoutMessagesInput
    fromUser: UserCreateNestedOneWithoutMessageInput
  }

  export type ChannelMessageUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    channelId: number
    fromUserId: number
    message: string
  }

  export type ChannelMessageUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    channel?: ChannelUpdateOneRequiredWithoutMessagesNestedInput
    fromUser?: UserUpdateOneRequiredWithoutMessageNestedInput
  }

  export type ChannelMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelId?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelMessageCreateManyInput = {
    id?: number
    createdAt?: Date | string
    channelId: number
    fromUserId: number
    message: string
  }

  export type ChannelMessageUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelId?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
  }

  export type SourceBansCreateInput = {
    userId: number
    channelId: number
    adminUsername: string
    type: string
    createdAt?: Date | string
    expireAt: Date | string
    duration: number
    reason: string
  }

  export type SourceBansUncheckedCreateInput = {
    id?: number
    userId: number
    channelId: number
    adminUsername: string
    type: string
    createdAt?: Date | string
    expireAt: Date | string
    duration: number
    reason: string
  }

  export type SourceBansUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    adminUsername?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type SourceBansUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    adminUsername?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type SourceBansCreateManyInput = {
    id?: number
    userId: number
    channelId: number
    adminUsername: string
    type: string
    createdAt?: Date | string
    expireAt: Date | string
    duration: number
    reason: string
  }

  export type SourceBansUpdateManyMutationInput = {
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    adminUsername?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type SourceBansUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    adminUsername?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expireAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
  }

  export type runningamesCreateInput = {
    name: string
    idPlayer1: number
    idPlayer2: number
    hardMode?: boolean
    isReadInPongModule?: boolean
  }

  export type runningamesUncheckedCreateInput = {
    id?: number
    name: string
    idPlayer1: number
    idPlayer2: number
    hardMode?: boolean
    isReadInPongModule?: boolean
  }

  export type runningamesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    idPlayer1?: IntFieldUpdateOperationsInput | number
    idPlayer2?: IntFieldUpdateOperationsInput | number
    hardMode?: BoolFieldUpdateOperationsInput | boolean
    isReadInPongModule?: BoolFieldUpdateOperationsInput | boolean
  }

  export type runningamesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    idPlayer1?: IntFieldUpdateOperationsInput | number
    idPlayer2?: IntFieldUpdateOperationsInput | number
    hardMode?: BoolFieldUpdateOperationsInput | boolean
    isReadInPongModule?: BoolFieldUpdateOperationsInput | boolean
  }

  export type runningamesCreateManyInput = {
    id?: number
    name: string
    idPlayer1: number
    idPlayer2: number
    hardMode?: boolean
    isReadInPongModule?: boolean
  }

  export type runningamesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    idPlayer1?: IntFieldUpdateOperationsInput | number
    idPlayer2?: IntFieldUpdateOperationsInput | number
    hardMode?: BoolFieldUpdateOperationsInput | boolean
    isReadInPongModule?: BoolFieldUpdateOperationsInput | boolean
  }

  export type runningamesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    idPlayer1?: IntFieldUpdateOperationsInput | number
    idPlayer2?: IntFieldUpdateOperationsInput | number
    hardMode?: BoolFieldUpdateOperationsInput | boolean
    isReadInPongModule?: BoolFieldUpdateOperationsInput | boolean
  }

  export type gameHistoryCreateInput = {
    date?: Date | string
    idPlayer1: number
    idPlayer2: number
    scorePlayer1: number
    scorePlayer2: number
    idWinner: number
  }

  export type gameHistoryUncheckedCreateInput = {
    id?: number
    date?: Date | string
    idPlayer1: number
    idPlayer2: number
    scorePlayer1: number
    scorePlayer2: number
    idWinner: number
  }

  export type gameHistoryUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idPlayer1?: IntFieldUpdateOperationsInput | number
    idPlayer2?: IntFieldUpdateOperationsInput | number
    scorePlayer1?: IntFieldUpdateOperationsInput | number
    scorePlayer2?: IntFieldUpdateOperationsInput | number
    idWinner?: IntFieldUpdateOperationsInput | number
  }

  export type gameHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idPlayer1?: IntFieldUpdateOperationsInput | number
    idPlayer2?: IntFieldUpdateOperationsInput | number
    scorePlayer1?: IntFieldUpdateOperationsInput | number
    scorePlayer2?: IntFieldUpdateOperationsInput | number
    idWinner?: IntFieldUpdateOperationsInput | number
  }

  export type gameHistoryCreateManyInput = {
    id?: number
    date?: Date | string
    idPlayer1: number
    idPlayer2: number
    scorePlayer1: number
    scorePlayer2: number
    idWinner: number
  }

  export type gameHistoryUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idPlayer1?: IntFieldUpdateOperationsInput | number
    idPlayer2?: IntFieldUpdateOperationsInput | number
    scorePlayer1?: IntFieldUpdateOperationsInput | number
    scorePlayer2?: IntFieldUpdateOperationsInput | number
    idWinner?: IntFieldUpdateOperationsInput | number
  }

  export type gameHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    idPlayer1?: IntFieldUpdateOperationsInput | number
    idPlayer2?: IntFieldUpdateOperationsInput | number
    scorePlayer1?: IntFieldUpdateOperationsInput | number
    scorePlayer2?: IntFieldUpdateOperationsInput | number
    idWinner?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type AvatarNullableRelationFilter = {
    is?: AvatarWhereInput | null
    isNot?: AvatarWhereInput | null
  }

  export type ChannelMessageListRelationFilter = {
    every?: ChannelMessageWhereInput
    some?: ChannelMessageWhereInput
    none?: ChannelMessageWhereInput
  }

  export type ChannelUserListRelationFilter = {
    every?: ChannelUserWhereInput
    some?: ChannelUserWhereInput
    none?: ChannelUserWhereInput
  }

  export type FriendsListRelationFilter = {
    every?: FriendsWhereInput
    some?: FriendsWhereInput
    none?: FriendsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ChannelMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChannelUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FriendsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    isLogged?: SortOrder
    inChat?: SortOrder
    inGame?: SortOrder
    gamesWon?: SortOrder
    gamesLost?: SortOrder
    score?: SortOrder
    userSecret?: SortOrder
    avatarId?: SortOrder
    IstwoFactorAuth?: SortOrder
    IsSigninWith42?: SortOrder
    hash?: SortOrder
    hashedRt?: SortOrder
    blockedIds?: SortOrder
    achievementChat?: SortOrder
    achievementPong?: SortOrder
    achievementAvatar?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    gamesWon?: SortOrder
    gamesLost?: SortOrder
    score?: SortOrder
    avatarId?: SortOrder
    blockedIds?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    isLogged?: SortOrder
    inChat?: SortOrder
    inGame?: SortOrder
    gamesWon?: SortOrder
    gamesLost?: SortOrder
    score?: SortOrder
    userSecret?: SortOrder
    avatarId?: SortOrder
    IstwoFactorAuth?: SortOrder
    IsSigninWith42?: SortOrder
    hash?: SortOrder
    hashedRt?: SortOrder
    achievementChat?: SortOrder
    achievementPong?: SortOrder
    achievementAvatar?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: SortOrder
    username?: SortOrder
    isLogged?: SortOrder
    inChat?: SortOrder
    inGame?: SortOrder
    gamesWon?: SortOrder
    gamesLost?: SortOrder
    score?: SortOrder
    userSecret?: SortOrder
    avatarId?: SortOrder
    IstwoFactorAuth?: SortOrder
    IsSigninWith42?: SortOrder
    hash?: SortOrder
    hashedRt?: SortOrder
    achievementChat?: SortOrder
    achievementPong?: SortOrder
    achievementAvatar?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    gamesWon?: SortOrder
    gamesLost?: SortOrder
    score?: SortOrder
    avatarId?: SortOrder
    blockedIds?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FriendsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
  }

  export type FriendsAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
  }

  export type FriendsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
  }

  export type FriendsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
  }

  export type FriendsSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    friendId?: SortOrder
  }

  export type BytesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesFilter<$PrismaModel> | Buffer
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AvatarCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    data?: SortOrder
    userId?: SortOrder
    url42?: SortOrder
  }

  export type AvatarAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AvatarMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    data?: SortOrder
    userId?: SortOrder
    url42?: SortOrder
  }

  export type AvatarMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    data?: SortOrder
    userId?: SortOrder
    url42?: SortOrder
  }

  export type AvatarSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Buffer
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type EnumChannelTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelType | EnumChannelTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelTypeFilter<$PrismaModel> | $Enums.ChannelType
  }

  export type ChannelCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChannelAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ChannelMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChannelMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    password?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChannelSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumChannelTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelType | EnumChannelTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelTypeWithAggregatesFilter<$PrismaModel> | $Enums.ChannelType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChannelTypeFilter<$PrismaModel>
    _max?: NestedEnumChannelTypeFilter<$PrismaModel>
  }

  export type EnumChannelUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelUserRole | EnumChannelUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelUserRole[] | ListEnumChannelUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelUserRole[] | ListEnumChannelUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelUserRoleFilter<$PrismaModel> | $Enums.ChannelUserRole
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ChannelRelationFilter = {
    is?: ChannelWhereInput
    isNot?: ChannelWhereInput
  }

  export type ChannelUserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    role?: SortOrder
    socketIds?: SortOrder
  }

  export type ChannelUserAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
  }

  export type ChannelUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    role?: SortOrder
  }

  export type ChannelUserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    role?: SortOrder
  }

  export type ChannelUserSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
  }

  export type EnumChannelUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelUserRole | EnumChannelUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelUserRole[] | ListEnumChannelUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelUserRole[] | ListEnumChannelUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.ChannelUserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChannelUserRoleFilter<$PrismaModel>
    _max?: NestedEnumChannelUserRoleFilter<$PrismaModel>
  }

  export type ChannelMessageCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    channelId?: SortOrder
    fromUserId?: SortOrder
    message?: SortOrder
  }

  export type ChannelMessageAvgOrderByAggregateInput = {
    id?: SortOrder
    channelId?: SortOrder
    fromUserId?: SortOrder
  }

  export type ChannelMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    channelId?: SortOrder
    fromUserId?: SortOrder
    message?: SortOrder
  }

  export type ChannelMessageMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    channelId?: SortOrder
    fromUserId?: SortOrder
    message?: SortOrder
  }

  export type ChannelMessageSumOrderByAggregateInput = {
    id?: SortOrder
    channelId?: SortOrder
    fromUserId?: SortOrder
  }

  export type SourceBansCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    adminUsername?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    expireAt?: SortOrder
    duration?: SortOrder
    reason?: SortOrder
  }

  export type SourceBansAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    duration?: SortOrder
  }

  export type SourceBansMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    adminUsername?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    expireAt?: SortOrder
    duration?: SortOrder
    reason?: SortOrder
  }

  export type SourceBansMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    adminUsername?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    expireAt?: SortOrder
    duration?: SortOrder
    reason?: SortOrder
  }

  export type SourceBansSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    channelId?: SortOrder
    duration?: SortOrder
  }

  export type runningamesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
    hardMode?: SortOrder
    isReadInPongModule?: SortOrder
  }

  export type runningamesAvgOrderByAggregateInput = {
    id?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
  }

  export type runningamesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
    hardMode?: SortOrder
    isReadInPongModule?: SortOrder
  }

  export type runningamesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
    hardMode?: SortOrder
    isReadInPongModule?: SortOrder
  }

  export type runningamesSumOrderByAggregateInput = {
    id?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
  }

  export type gameHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
    scorePlayer1?: SortOrder
    scorePlayer2?: SortOrder
    idWinner?: SortOrder
  }

  export type gameHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
    scorePlayer1?: SortOrder
    scorePlayer2?: SortOrder
    idWinner?: SortOrder
  }

  export type gameHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
    scorePlayer1?: SortOrder
    scorePlayer2?: SortOrder
    idWinner?: SortOrder
  }

  export type gameHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
    scorePlayer1?: SortOrder
    scorePlayer2?: SortOrder
    idWinner?: SortOrder
  }

  export type gameHistorySumOrderByAggregateInput = {
    id?: SortOrder
    idPlayer1?: SortOrder
    idPlayer2?: SortOrder
    scorePlayer1?: SortOrder
    scorePlayer2?: SortOrder
    idWinner?: SortOrder
  }

  export type UserCreateblockedIdsInput = {
    set: number[]
  }

  export type AvatarCreateNestedOneWithoutUserInput = {
    create?: XOR<AvatarCreateWithoutUserInput, AvatarUncheckedCreateWithoutUserInput>
    connectOrCreate?: AvatarCreateOrConnectWithoutUserInput
    connect?: AvatarWhereUniqueInput
  }

  export type ChannelMessageCreateNestedManyWithoutFromUserInput = {
    create?: XOR<ChannelMessageCreateWithoutFromUserInput, ChannelMessageUncheckedCreateWithoutFromUserInput> | ChannelMessageCreateWithoutFromUserInput[] | ChannelMessageUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: ChannelMessageCreateOrConnectWithoutFromUserInput | ChannelMessageCreateOrConnectWithoutFromUserInput[]
    createMany?: ChannelMessageCreateManyFromUserInputEnvelope
    connect?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
  }

  export type ChannelUserCreateNestedManyWithoutUserInput = {
    create?: XOR<ChannelUserCreateWithoutUserInput, ChannelUserUncheckedCreateWithoutUserInput> | ChannelUserCreateWithoutUserInput[] | ChannelUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChannelUserCreateOrConnectWithoutUserInput | ChannelUserCreateOrConnectWithoutUserInput[]
    createMany?: ChannelUserCreateManyUserInputEnvelope
    connect?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
  }

  export type FriendsCreateNestedManyWithoutUserInput = {
    create?: XOR<FriendsCreateWithoutUserInput, FriendsUncheckedCreateWithoutUserInput> | FriendsCreateWithoutUserInput[] | FriendsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FriendsCreateOrConnectWithoutUserInput | FriendsCreateOrConnectWithoutUserInput[]
    createMany?: FriendsCreateManyUserInputEnvelope
    connect?: FriendsWhereUniqueInput | FriendsWhereUniqueInput[]
  }

  export type ChannelMessageUncheckedCreateNestedManyWithoutFromUserInput = {
    create?: XOR<ChannelMessageCreateWithoutFromUserInput, ChannelMessageUncheckedCreateWithoutFromUserInput> | ChannelMessageCreateWithoutFromUserInput[] | ChannelMessageUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: ChannelMessageCreateOrConnectWithoutFromUserInput | ChannelMessageCreateOrConnectWithoutFromUserInput[]
    createMany?: ChannelMessageCreateManyFromUserInputEnvelope
    connect?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
  }

  export type ChannelUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChannelUserCreateWithoutUserInput, ChannelUserUncheckedCreateWithoutUserInput> | ChannelUserCreateWithoutUserInput[] | ChannelUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChannelUserCreateOrConnectWithoutUserInput | ChannelUserCreateOrConnectWithoutUserInput[]
    createMany?: ChannelUserCreateManyUserInputEnvelope
    connect?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
  }

  export type FriendsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FriendsCreateWithoutUserInput, FriendsUncheckedCreateWithoutUserInput> | FriendsCreateWithoutUserInput[] | FriendsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FriendsCreateOrConnectWithoutUserInput | FriendsCreateOrConnectWithoutUserInput[]
    createMany?: FriendsCreateManyUserInputEnvelope
    connect?: FriendsWhereUniqueInput | FriendsWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateblockedIdsInput = {
    set?: number[]
    push?: number | number[]
  }

  export type AvatarUpdateOneWithoutUserNestedInput = {
    create?: XOR<AvatarCreateWithoutUserInput, AvatarUncheckedCreateWithoutUserInput>
    connectOrCreate?: AvatarCreateOrConnectWithoutUserInput
    upsert?: AvatarUpsertWithoutUserInput
    disconnect?: AvatarWhereInput | boolean
    delete?: AvatarWhereInput | boolean
    connect?: AvatarWhereUniqueInput
    update?: XOR<XOR<AvatarUpdateToOneWithWhereWithoutUserInput, AvatarUpdateWithoutUserInput>, AvatarUncheckedUpdateWithoutUserInput>
  }

  export type ChannelMessageUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<ChannelMessageCreateWithoutFromUserInput, ChannelMessageUncheckedCreateWithoutFromUserInput> | ChannelMessageCreateWithoutFromUserInput[] | ChannelMessageUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: ChannelMessageCreateOrConnectWithoutFromUserInput | ChannelMessageCreateOrConnectWithoutFromUserInput[]
    upsert?: ChannelMessageUpsertWithWhereUniqueWithoutFromUserInput | ChannelMessageUpsertWithWhereUniqueWithoutFromUserInput[]
    createMany?: ChannelMessageCreateManyFromUserInputEnvelope
    set?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    disconnect?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    delete?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    connect?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    update?: ChannelMessageUpdateWithWhereUniqueWithoutFromUserInput | ChannelMessageUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: ChannelMessageUpdateManyWithWhereWithoutFromUserInput | ChannelMessageUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: ChannelMessageScalarWhereInput | ChannelMessageScalarWhereInput[]
  }

  export type ChannelUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChannelUserCreateWithoutUserInput, ChannelUserUncheckedCreateWithoutUserInput> | ChannelUserCreateWithoutUserInput[] | ChannelUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChannelUserCreateOrConnectWithoutUserInput | ChannelUserCreateOrConnectWithoutUserInput[]
    upsert?: ChannelUserUpsertWithWhereUniqueWithoutUserInput | ChannelUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChannelUserCreateManyUserInputEnvelope
    set?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    disconnect?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    delete?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    connect?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    update?: ChannelUserUpdateWithWhereUniqueWithoutUserInput | ChannelUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChannelUserUpdateManyWithWhereWithoutUserInput | ChannelUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChannelUserScalarWhereInput | ChannelUserScalarWhereInput[]
  }

  export type FriendsUpdateManyWithoutUserNestedInput = {
    create?: XOR<FriendsCreateWithoutUserInput, FriendsUncheckedCreateWithoutUserInput> | FriendsCreateWithoutUserInput[] | FriendsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FriendsCreateOrConnectWithoutUserInput | FriendsCreateOrConnectWithoutUserInput[]
    upsert?: FriendsUpsertWithWhereUniqueWithoutUserInput | FriendsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FriendsCreateManyUserInputEnvelope
    set?: FriendsWhereUniqueInput | FriendsWhereUniqueInput[]
    disconnect?: FriendsWhereUniqueInput | FriendsWhereUniqueInput[]
    delete?: FriendsWhereUniqueInput | FriendsWhereUniqueInput[]
    connect?: FriendsWhereUniqueInput | FriendsWhereUniqueInput[]
    update?: FriendsUpdateWithWhereUniqueWithoutUserInput | FriendsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FriendsUpdateManyWithWhereWithoutUserInput | FriendsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FriendsScalarWhereInput | FriendsScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ChannelMessageUncheckedUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<ChannelMessageCreateWithoutFromUserInput, ChannelMessageUncheckedCreateWithoutFromUserInput> | ChannelMessageCreateWithoutFromUserInput[] | ChannelMessageUncheckedCreateWithoutFromUserInput[]
    connectOrCreate?: ChannelMessageCreateOrConnectWithoutFromUserInput | ChannelMessageCreateOrConnectWithoutFromUserInput[]
    upsert?: ChannelMessageUpsertWithWhereUniqueWithoutFromUserInput | ChannelMessageUpsertWithWhereUniqueWithoutFromUserInput[]
    createMany?: ChannelMessageCreateManyFromUserInputEnvelope
    set?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    disconnect?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    delete?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    connect?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    update?: ChannelMessageUpdateWithWhereUniqueWithoutFromUserInput | ChannelMessageUpdateWithWhereUniqueWithoutFromUserInput[]
    updateMany?: ChannelMessageUpdateManyWithWhereWithoutFromUserInput | ChannelMessageUpdateManyWithWhereWithoutFromUserInput[]
    deleteMany?: ChannelMessageScalarWhereInput | ChannelMessageScalarWhereInput[]
  }

  export type ChannelUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChannelUserCreateWithoutUserInput, ChannelUserUncheckedCreateWithoutUserInput> | ChannelUserCreateWithoutUserInput[] | ChannelUserUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChannelUserCreateOrConnectWithoutUserInput | ChannelUserCreateOrConnectWithoutUserInput[]
    upsert?: ChannelUserUpsertWithWhereUniqueWithoutUserInput | ChannelUserUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChannelUserCreateManyUserInputEnvelope
    set?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    disconnect?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    delete?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    connect?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    update?: ChannelUserUpdateWithWhereUniqueWithoutUserInput | ChannelUserUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChannelUserUpdateManyWithWhereWithoutUserInput | ChannelUserUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChannelUserScalarWhereInput | ChannelUserScalarWhereInput[]
  }

  export type FriendsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FriendsCreateWithoutUserInput, FriendsUncheckedCreateWithoutUserInput> | FriendsCreateWithoutUserInput[] | FriendsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FriendsCreateOrConnectWithoutUserInput | FriendsCreateOrConnectWithoutUserInput[]
    upsert?: FriendsUpsertWithWhereUniqueWithoutUserInput | FriendsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FriendsCreateManyUserInputEnvelope
    set?: FriendsWhereUniqueInput | FriendsWhereUniqueInput[]
    disconnect?: FriendsWhereUniqueInput | FriendsWhereUniqueInput[]
    delete?: FriendsWhereUniqueInput | FriendsWhereUniqueInput[]
    connect?: FriendsWhereUniqueInput | FriendsWhereUniqueInput[]
    update?: FriendsUpdateWithWhereUniqueWithoutUserInput | FriendsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FriendsUpdateManyWithWhereWithoutUserInput | FriendsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FriendsScalarWhereInput | FriendsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFriendsInput = {
    create?: XOR<UserCreateWithoutFriendsInput, UserUncheckedCreateWithoutFriendsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriendsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFriendsNestedInput = {
    create?: XOR<UserCreateWithoutFriendsInput, UserUncheckedCreateWithoutFriendsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFriendsInput
    upsert?: UserUpsertWithoutFriendsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFriendsInput, UserUpdateWithoutFriendsInput>, UserUncheckedUpdateWithoutFriendsInput>
  }

  export type UserCreateNestedManyWithoutAvatarInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAvatarInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Buffer
  }

  export type UserUpdateManyWithoutAvatarNestedInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAvatarInput | UserUpsertWithWhereUniqueWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAvatarInput | UserUpdateWithWhereUniqueWithoutAvatarInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAvatarInput | UserUpdateManyWithWhereWithoutAvatarInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAvatarNestedInput = {
    create?: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput> | UserCreateWithoutAvatarInput[] | UserUncheckedCreateWithoutAvatarInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAvatarInput | UserCreateOrConnectWithoutAvatarInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAvatarInput | UserUpsertWithWhereUniqueWithoutAvatarInput[]
    createMany?: UserCreateManyAvatarInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAvatarInput | UserUpdateWithWhereUniqueWithoutAvatarInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAvatarInput | UserUpdateManyWithWhereWithoutAvatarInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ChannelMessageCreateNestedManyWithoutChannelInput = {
    create?: XOR<ChannelMessageCreateWithoutChannelInput, ChannelMessageUncheckedCreateWithoutChannelInput> | ChannelMessageCreateWithoutChannelInput[] | ChannelMessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelMessageCreateOrConnectWithoutChannelInput | ChannelMessageCreateOrConnectWithoutChannelInput[]
    createMany?: ChannelMessageCreateManyChannelInputEnvelope
    connect?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
  }

  export type ChannelUserCreateNestedManyWithoutChannelInput = {
    create?: XOR<ChannelUserCreateWithoutChannelInput, ChannelUserUncheckedCreateWithoutChannelInput> | ChannelUserCreateWithoutChannelInput[] | ChannelUserUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelUserCreateOrConnectWithoutChannelInput | ChannelUserCreateOrConnectWithoutChannelInput[]
    createMany?: ChannelUserCreateManyChannelInputEnvelope
    connect?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
  }

  export type ChannelMessageUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<ChannelMessageCreateWithoutChannelInput, ChannelMessageUncheckedCreateWithoutChannelInput> | ChannelMessageCreateWithoutChannelInput[] | ChannelMessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelMessageCreateOrConnectWithoutChannelInput | ChannelMessageCreateOrConnectWithoutChannelInput[]
    createMany?: ChannelMessageCreateManyChannelInputEnvelope
    connect?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
  }

  export type ChannelUserUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<ChannelUserCreateWithoutChannelInput, ChannelUserUncheckedCreateWithoutChannelInput> | ChannelUserCreateWithoutChannelInput[] | ChannelUserUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelUserCreateOrConnectWithoutChannelInput | ChannelUserCreateOrConnectWithoutChannelInput[]
    createMany?: ChannelUserCreateManyChannelInputEnvelope
    connect?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
  }

  export type EnumChannelTypeFieldUpdateOperationsInput = {
    set?: $Enums.ChannelType
  }

  export type ChannelMessageUpdateManyWithoutChannelNestedInput = {
    create?: XOR<ChannelMessageCreateWithoutChannelInput, ChannelMessageUncheckedCreateWithoutChannelInput> | ChannelMessageCreateWithoutChannelInput[] | ChannelMessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelMessageCreateOrConnectWithoutChannelInput | ChannelMessageCreateOrConnectWithoutChannelInput[]
    upsert?: ChannelMessageUpsertWithWhereUniqueWithoutChannelInput | ChannelMessageUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: ChannelMessageCreateManyChannelInputEnvelope
    set?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    disconnect?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    delete?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    connect?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    update?: ChannelMessageUpdateWithWhereUniqueWithoutChannelInput | ChannelMessageUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: ChannelMessageUpdateManyWithWhereWithoutChannelInput | ChannelMessageUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: ChannelMessageScalarWhereInput | ChannelMessageScalarWhereInput[]
  }

  export type ChannelUserUpdateManyWithoutChannelNestedInput = {
    create?: XOR<ChannelUserCreateWithoutChannelInput, ChannelUserUncheckedCreateWithoutChannelInput> | ChannelUserCreateWithoutChannelInput[] | ChannelUserUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelUserCreateOrConnectWithoutChannelInput | ChannelUserCreateOrConnectWithoutChannelInput[]
    upsert?: ChannelUserUpsertWithWhereUniqueWithoutChannelInput | ChannelUserUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: ChannelUserCreateManyChannelInputEnvelope
    set?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    disconnect?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    delete?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    connect?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    update?: ChannelUserUpdateWithWhereUniqueWithoutChannelInput | ChannelUserUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: ChannelUserUpdateManyWithWhereWithoutChannelInput | ChannelUserUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: ChannelUserScalarWhereInput | ChannelUserScalarWhereInput[]
  }

  export type ChannelMessageUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<ChannelMessageCreateWithoutChannelInput, ChannelMessageUncheckedCreateWithoutChannelInput> | ChannelMessageCreateWithoutChannelInput[] | ChannelMessageUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelMessageCreateOrConnectWithoutChannelInput | ChannelMessageCreateOrConnectWithoutChannelInput[]
    upsert?: ChannelMessageUpsertWithWhereUniqueWithoutChannelInput | ChannelMessageUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: ChannelMessageCreateManyChannelInputEnvelope
    set?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    disconnect?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    delete?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    connect?: ChannelMessageWhereUniqueInput | ChannelMessageWhereUniqueInput[]
    update?: ChannelMessageUpdateWithWhereUniqueWithoutChannelInput | ChannelMessageUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: ChannelMessageUpdateManyWithWhereWithoutChannelInput | ChannelMessageUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: ChannelMessageScalarWhereInput | ChannelMessageScalarWhereInput[]
  }

  export type ChannelUserUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<ChannelUserCreateWithoutChannelInput, ChannelUserUncheckedCreateWithoutChannelInput> | ChannelUserCreateWithoutChannelInput[] | ChannelUserUncheckedCreateWithoutChannelInput[]
    connectOrCreate?: ChannelUserCreateOrConnectWithoutChannelInput | ChannelUserCreateOrConnectWithoutChannelInput[]
    upsert?: ChannelUserUpsertWithWhereUniqueWithoutChannelInput | ChannelUserUpsertWithWhereUniqueWithoutChannelInput[]
    createMany?: ChannelUserCreateManyChannelInputEnvelope
    set?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    disconnect?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    delete?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    connect?: ChannelUserWhereUniqueInput | ChannelUserWhereUniqueInput[]
    update?: ChannelUserUpdateWithWhereUniqueWithoutChannelInput | ChannelUserUpdateWithWhereUniqueWithoutChannelInput[]
    updateMany?: ChannelUserUpdateManyWithWhereWithoutChannelInput | ChannelUserUpdateManyWithWhereWithoutChannelInput[]
    deleteMany?: ChannelUserScalarWhereInput | ChannelUserScalarWhereInput[]
  }

  export type ChannelUserCreatesocketIdsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutChannelUserInput = {
    create?: XOR<UserCreateWithoutChannelUserInput, UserUncheckedCreateWithoutChannelUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelUserInput
    connect?: UserWhereUniqueInput
  }

  export type ChannelCreateNestedOneWithoutChannelUsersInput = {
    create?: XOR<ChannelCreateWithoutChannelUsersInput, ChannelUncheckedCreateWithoutChannelUsersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutChannelUsersInput
    connect?: ChannelWhereUniqueInput
  }

  export type EnumChannelUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.ChannelUserRole
  }

  export type ChannelUserUpdatesocketIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutChannelUserNestedInput = {
    create?: XOR<UserCreateWithoutChannelUserInput, UserUncheckedCreateWithoutChannelUserInput>
    connectOrCreate?: UserCreateOrConnectWithoutChannelUserInput
    upsert?: UserUpsertWithoutChannelUserInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChannelUserInput, UserUpdateWithoutChannelUserInput>, UserUncheckedUpdateWithoutChannelUserInput>
  }

  export type ChannelUpdateOneRequiredWithoutChannelUsersNestedInput = {
    create?: XOR<ChannelCreateWithoutChannelUsersInput, ChannelUncheckedCreateWithoutChannelUsersInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutChannelUsersInput
    upsert?: ChannelUpsertWithoutChannelUsersInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<XOR<ChannelUpdateToOneWithWhereWithoutChannelUsersInput, ChannelUpdateWithoutChannelUsersInput>, ChannelUncheckedUpdateWithoutChannelUsersInput>
  }

  export type ChannelCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMessagesInput
    connect?: ChannelWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessageInput = {
    create?: XOR<UserCreateWithoutMessageInput, UserUncheckedCreateWithoutMessageInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageInput
    connect?: UserWhereUniqueInput
  }

  export type ChannelUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutMessagesInput
    upsert?: ChannelUpsertWithoutMessagesInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<XOR<ChannelUpdateToOneWithWhereWithoutMessagesInput, ChannelUpdateWithoutMessagesInput>, ChannelUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneRequiredWithoutMessageNestedInput = {
    create?: XOR<UserCreateWithoutMessageInput, UserUncheckedCreateWithoutMessageInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessageInput
    upsert?: UserUpsertWithoutMessageInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessageInput, UserUpdateWithoutMessageInput>, UserUncheckedUpdateWithoutMessageInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBytesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesFilter<$PrismaModel> | Buffer
  }

  export type NestedBytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Buffer | BytesFieldRefInput<$PrismaModel>
    in?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Buffer[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Buffer
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type NestedEnumChannelTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelType | EnumChannelTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelTypeFilter<$PrismaModel> | $Enums.ChannelType
  }

  export type NestedEnumChannelTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelType | EnumChannelTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelType[] | ListEnumChannelTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelTypeWithAggregatesFilter<$PrismaModel> | $Enums.ChannelType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChannelTypeFilter<$PrismaModel>
    _max?: NestedEnumChannelTypeFilter<$PrismaModel>
  }

  export type NestedEnumChannelUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelUserRole | EnumChannelUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelUserRole[] | ListEnumChannelUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelUserRole[] | ListEnumChannelUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelUserRoleFilter<$PrismaModel> | $Enums.ChannelUserRole
  }

  export type NestedEnumChannelUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ChannelUserRole | EnumChannelUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ChannelUserRole[] | ListEnumChannelUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ChannelUserRole[] | ListEnumChannelUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumChannelUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.ChannelUserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumChannelUserRoleFilter<$PrismaModel>
    _max?: NestedEnumChannelUserRoleFilter<$PrismaModel>
  }

  export type AvatarCreateWithoutUserInput = {
    filename: string
    data: Buffer
    userId: number
    url42?: string | null
  }

  export type AvatarUncheckedCreateWithoutUserInput = {
    id?: number
    filename: string
    data: Buffer
    userId: number
    url42?: string | null
  }

  export type AvatarCreateOrConnectWithoutUserInput = {
    where: AvatarWhereUniqueInput
    create: XOR<AvatarCreateWithoutUserInput, AvatarUncheckedCreateWithoutUserInput>
  }

  export type ChannelMessageCreateWithoutFromUserInput = {
    createdAt?: Date | string
    message: string
    channel: ChannelCreateNestedOneWithoutMessagesInput
  }

  export type ChannelMessageUncheckedCreateWithoutFromUserInput = {
    id?: number
    createdAt?: Date | string
    channelId: number
    message: string
  }

  export type ChannelMessageCreateOrConnectWithoutFromUserInput = {
    where: ChannelMessageWhereUniqueInput
    create: XOR<ChannelMessageCreateWithoutFromUserInput, ChannelMessageUncheckedCreateWithoutFromUserInput>
  }

  export type ChannelMessageCreateManyFromUserInputEnvelope = {
    data: ChannelMessageCreateManyFromUserInput | ChannelMessageCreateManyFromUserInput[]
    skipDuplicates?: boolean
  }

  export type ChannelUserCreateWithoutUserInput = {
    role: $Enums.ChannelUserRole
    socketIds?: ChannelUserCreatesocketIdsInput | string[]
    channel: ChannelCreateNestedOneWithoutChannelUsersInput
  }

  export type ChannelUserUncheckedCreateWithoutUserInput = {
    id?: number
    channelId: number
    role: $Enums.ChannelUserRole
    socketIds?: ChannelUserCreatesocketIdsInput | string[]
  }

  export type ChannelUserCreateOrConnectWithoutUserInput = {
    where: ChannelUserWhereUniqueInput
    create: XOR<ChannelUserCreateWithoutUserInput, ChannelUserUncheckedCreateWithoutUserInput>
  }

  export type ChannelUserCreateManyUserInputEnvelope = {
    data: ChannelUserCreateManyUserInput | ChannelUserCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FriendsCreateWithoutUserInput = {
    friendId: number
  }

  export type FriendsUncheckedCreateWithoutUserInput = {
    id?: number
    friendId: number
  }

  export type FriendsCreateOrConnectWithoutUserInput = {
    where: FriendsWhereUniqueInput
    create: XOR<FriendsCreateWithoutUserInput, FriendsUncheckedCreateWithoutUserInput>
  }

  export type FriendsCreateManyUserInputEnvelope = {
    data: FriendsCreateManyUserInput | FriendsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AvatarUpsertWithoutUserInput = {
    update: XOR<AvatarUpdateWithoutUserInput, AvatarUncheckedUpdateWithoutUserInput>
    create: XOR<AvatarCreateWithoutUserInput, AvatarUncheckedCreateWithoutUserInput>
    where?: AvatarWhereInput
  }

  export type AvatarUpdateToOneWithWhereWithoutUserInput = {
    where?: AvatarWhereInput
    data: XOR<AvatarUpdateWithoutUserInput, AvatarUncheckedUpdateWithoutUserInput>
  }

  export type AvatarUpdateWithoutUserInput = {
    filename?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    userId?: IntFieldUpdateOperationsInput | number
    url42?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AvatarUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    data?: BytesFieldUpdateOperationsInput | Buffer
    userId?: IntFieldUpdateOperationsInput | number
    url42?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChannelMessageUpsertWithWhereUniqueWithoutFromUserInput = {
    where: ChannelMessageWhereUniqueInput
    update: XOR<ChannelMessageUpdateWithoutFromUserInput, ChannelMessageUncheckedUpdateWithoutFromUserInput>
    create: XOR<ChannelMessageCreateWithoutFromUserInput, ChannelMessageUncheckedCreateWithoutFromUserInput>
  }

  export type ChannelMessageUpdateWithWhereUniqueWithoutFromUserInput = {
    where: ChannelMessageWhereUniqueInput
    data: XOR<ChannelMessageUpdateWithoutFromUserInput, ChannelMessageUncheckedUpdateWithoutFromUserInput>
  }

  export type ChannelMessageUpdateManyWithWhereWithoutFromUserInput = {
    where: ChannelMessageScalarWhereInput
    data: XOR<ChannelMessageUpdateManyMutationInput, ChannelMessageUncheckedUpdateManyWithoutFromUserInput>
  }

  export type ChannelMessageScalarWhereInput = {
    AND?: ChannelMessageScalarWhereInput | ChannelMessageScalarWhereInput[]
    OR?: ChannelMessageScalarWhereInput[]
    NOT?: ChannelMessageScalarWhereInput | ChannelMessageScalarWhereInput[]
    id?: IntFilter<"ChannelMessage"> | number
    createdAt?: DateTimeFilter<"ChannelMessage"> | Date | string
    channelId?: IntFilter<"ChannelMessage"> | number
    fromUserId?: IntFilter<"ChannelMessage"> | number
    message?: StringFilter<"ChannelMessage"> | string
  }

  export type ChannelUserUpsertWithWhereUniqueWithoutUserInput = {
    where: ChannelUserWhereUniqueInput
    update: XOR<ChannelUserUpdateWithoutUserInput, ChannelUserUncheckedUpdateWithoutUserInput>
    create: XOR<ChannelUserCreateWithoutUserInput, ChannelUserUncheckedCreateWithoutUserInput>
  }

  export type ChannelUserUpdateWithWhereUniqueWithoutUserInput = {
    where: ChannelUserWhereUniqueInput
    data: XOR<ChannelUserUpdateWithoutUserInput, ChannelUserUncheckedUpdateWithoutUserInput>
  }

  export type ChannelUserUpdateManyWithWhereWithoutUserInput = {
    where: ChannelUserScalarWhereInput
    data: XOR<ChannelUserUpdateManyMutationInput, ChannelUserUncheckedUpdateManyWithoutUserInput>
  }

  export type ChannelUserScalarWhereInput = {
    AND?: ChannelUserScalarWhereInput | ChannelUserScalarWhereInput[]
    OR?: ChannelUserScalarWhereInput[]
    NOT?: ChannelUserScalarWhereInput | ChannelUserScalarWhereInput[]
    id?: IntFilter<"ChannelUser"> | number
    userId?: IntFilter<"ChannelUser"> | number
    channelId?: IntFilter<"ChannelUser"> | number
    role?: EnumChannelUserRoleFilter<"ChannelUser"> | $Enums.ChannelUserRole
    socketIds?: StringNullableListFilter<"ChannelUser">
  }

  export type FriendsUpsertWithWhereUniqueWithoutUserInput = {
    where: FriendsWhereUniqueInput
    update: XOR<FriendsUpdateWithoutUserInput, FriendsUncheckedUpdateWithoutUserInput>
    create: XOR<FriendsCreateWithoutUserInput, FriendsUncheckedCreateWithoutUserInput>
  }

  export type FriendsUpdateWithWhereUniqueWithoutUserInput = {
    where: FriendsWhereUniqueInput
    data: XOR<FriendsUpdateWithoutUserInput, FriendsUncheckedUpdateWithoutUserInput>
  }

  export type FriendsUpdateManyWithWhereWithoutUserInput = {
    where: FriendsScalarWhereInput
    data: XOR<FriendsUpdateManyMutationInput, FriendsUncheckedUpdateManyWithoutUserInput>
  }

  export type FriendsScalarWhereInput = {
    AND?: FriendsScalarWhereInput | FriendsScalarWhereInput[]
    OR?: FriendsScalarWhereInput[]
    NOT?: FriendsScalarWhereInput | FriendsScalarWhereInput[]
    id?: IntFilter<"Friends"> | number
    userId?: IntFilter<"Friends"> | number
    friendId?: IntFilter<"Friends"> | number
  }

  export type UserCreateWithoutFriendsInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon?: number
    gamesLost?: number
    score?: number
    userSecret?: string | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash?: string | null
    hashedRt?: string | null
    blockedIds?: UserCreateblockedIdsInput | number[]
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
    avatar?: AvatarCreateNestedOneWithoutUserInput
    message?: ChannelMessageCreateNestedManyWithoutFromUserInput
    channelUser?: ChannelUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFriendsInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon?: number
    gamesLost?: number
    score?: number
    userSecret?: string | null
    avatarId?: number | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash?: string | null
    hashedRt?: string | null
    blockedIds?: UserCreateblockedIdsInput | number[]
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
    message?: ChannelMessageUncheckedCreateNestedManyWithoutFromUserInput
    channelUser?: ChannelUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFriendsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFriendsInput, UserUncheckedCreateWithoutFriendsInput>
  }

  export type UserUpsertWithoutFriendsInput = {
    update: XOR<UserUpdateWithoutFriendsInput, UserUncheckedUpdateWithoutFriendsInput>
    create: XOR<UserCreateWithoutFriendsInput, UserUncheckedCreateWithoutFriendsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFriendsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFriendsInput, UserUncheckedUpdateWithoutFriendsInput>
  }

  export type UserUpdateWithoutFriendsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
    avatar?: AvatarUpdateOneWithoutUserNestedInput
    message?: ChannelMessageUpdateManyWithoutFromUserNestedInput
    channelUser?: ChannelUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFriendsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    avatarId?: NullableIntFieldUpdateOperationsInput | number | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
    message?: ChannelMessageUncheckedUpdateManyWithoutFromUserNestedInput
    channelUser?: ChannelUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAvatarInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon?: number
    gamesLost?: number
    score?: number
    userSecret?: string | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash?: string | null
    hashedRt?: string | null
    blockedIds?: UserCreateblockedIdsInput | number[]
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
    message?: ChannelMessageCreateNestedManyWithoutFromUserInput
    channelUser?: ChannelUserCreateNestedManyWithoutUserInput
    friends?: FriendsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAvatarInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon?: number
    gamesLost?: number
    score?: number
    userSecret?: string | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash?: string | null
    hashedRt?: string | null
    blockedIds?: UserCreateblockedIdsInput | number[]
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
    message?: ChannelMessageUncheckedCreateNestedManyWithoutFromUserInput
    channelUser?: ChannelUserUncheckedCreateNestedManyWithoutUserInput
    friends?: FriendsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAvatarInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput>
  }

  export type UserCreateManyAvatarInputEnvelope = {
    data: UserCreateManyAvatarInput | UserCreateManyAvatarInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutAvatarInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAvatarInput, UserUncheckedUpdateWithoutAvatarInput>
    create: XOR<UserCreateWithoutAvatarInput, UserUncheckedCreateWithoutAvatarInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAvatarInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAvatarInput, UserUncheckedUpdateWithoutAvatarInput>
  }

  export type UserUpdateManyWithWhereWithoutAvatarInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAvatarInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    isLogged?: BoolFilter<"User"> | boolean
    inChat?: BoolFilter<"User"> | boolean
    inGame?: BoolFilter<"User"> | boolean
    gamesWon?: IntFilter<"User"> | number
    gamesLost?: IntFilter<"User"> | number
    score?: IntFilter<"User"> | number
    userSecret?: StringNullableFilter<"User"> | string | null
    avatarId?: IntNullableFilter<"User"> | number | null
    IstwoFactorAuth?: BoolFilter<"User"> | boolean
    IsSigninWith42?: BoolFilter<"User"> | boolean
    hash?: StringNullableFilter<"User"> | string | null
    hashedRt?: StringNullableFilter<"User"> | string | null
    blockedIds?: IntNullableListFilter<"User">
    achievementChat?: BoolFilter<"User"> | boolean
    achievementPong?: BoolFilter<"User"> | boolean
    achievementAvatar?: BoolFilter<"User"> | boolean
  }

  export type ChannelMessageCreateWithoutChannelInput = {
    createdAt?: Date | string
    message: string
    fromUser: UserCreateNestedOneWithoutMessageInput
  }

  export type ChannelMessageUncheckedCreateWithoutChannelInput = {
    id?: number
    createdAt?: Date | string
    fromUserId: number
    message: string
  }

  export type ChannelMessageCreateOrConnectWithoutChannelInput = {
    where: ChannelMessageWhereUniqueInput
    create: XOR<ChannelMessageCreateWithoutChannelInput, ChannelMessageUncheckedCreateWithoutChannelInput>
  }

  export type ChannelMessageCreateManyChannelInputEnvelope = {
    data: ChannelMessageCreateManyChannelInput | ChannelMessageCreateManyChannelInput[]
    skipDuplicates?: boolean
  }

  export type ChannelUserCreateWithoutChannelInput = {
    role: $Enums.ChannelUserRole
    socketIds?: ChannelUserCreatesocketIdsInput | string[]
    user: UserCreateNestedOneWithoutChannelUserInput
  }

  export type ChannelUserUncheckedCreateWithoutChannelInput = {
    id?: number
    userId: number
    role: $Enums.ChannelUserRole
    socketIds?: ChannelUserCreatesocketIdsInput | string[]
  }

  export type ChannelUserCreateOrConnectWithoutChannelInput = {
    where: ChannelUserWhereUniqueInput
    create: XOR<ChannelUserCreateWithoutChannelInput, ChannelUserUncheckedCreateWithoutChannelInput>
  }

  export type ChannelUserCreateManyChannelInputEnvelope = {
    data: ChannelUserCreateManyChannelInput | ChannelUserCreateManyChannelInput[]
    skipDuplicates?: boolean
  }

  export type ChannelMessageUpsertWithWhereUniqueWithoutChannelInput = {
    where: ChannelMessageWhereUniqueInput
    update: XOR<ChannelMessageUpdateWithoutChannelInput, ChannelMessageUncheckedUpdateWithoutChannelInput>
    create: XOR<ChannelMessageCreateWithoutChannelInput, ChannelMessageUncheckedCreateWithoutChannelInput>
  }

  export type ChannelMessageUpdateWithWhereUniqueWithoutChannelInput = {
    where: ChannelMessageWhereUniqueInput
    data: XOR<ChannelMessageUpdateWithoutChannelInput, ChannelMessageUncheckedUpdateWithoutChannelInput>
  }

  export type ChannelMessageUpdateManyWithWhereWithoutChannelInput = {
    where: ChannelMessageScalarWhereInput
    data: XOR<ChannelMessageUpdateManyMutationInput, ChannelMessageUncheckedUpdateManyWithoutChannelInput>
  }

  export type ChannelUserUpsertWithWhereUniqueWithoutChannelInput = {
    where: ChannelUserWhereUniqueInput
    update: XOR<ChannelUserUpdateWithoutChannelInput, ChannelUserUncheckedUpdateWithoutChannelInput>
    create: XOR<ChannelUserCreateWithoutChannelInput, ChannelUserUncheckedCreateWithoutChannelInput>
  }

  export type ChannelUserUpdateWithWhereUniqueWithoutChannelInput = {
    where: ChannelUserWhereUniqueInput
    data: XOR<ChannelUserUpdateWithoutChannelInput, ChannelUserUncheckedUpdateWithoutChannelInput>
  }

  export type ChannelUserUpdateManyWithWhereWithoutChannelInput = {
    where: ChannelUserScalarWhereInput
    data: XOR<ChannelUserUpdateManyMutationInput, ChannelUserUncheckedUpdateManyWithoutChannelInput>
  }

  export type UserCreateWithoutChannelUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon?: number
    gamesLost?: number
    score?: number
    userSecret?: string | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash?: string | null
    hashedRt?: string | null
    blockedIds?: UserCreateblockedIdsInput | number[]
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
    avatar?: AvatarCreateNestedOneWithoutUserInput
    message?: ChannelMessageCreateNestedManyWithoutFromUserInput
    friends?: FriendsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChannelUserInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon?: number
    gamesLost?: number
    score?: number
    userSecret?: string | null
    avatarId?: number | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash?: string | null
    hashedRt?: string | null
    blockedIds?: UserCreateblockedIdsInput | number[]
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
    message?: ChannelMessageUncheckedCreateNestedManyWithoutFromUserInput
    friends?: FriendsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChannelUserInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChannelUserInput, UserUncheckedCreateWithoutChannelUserInput>
  }

  export type ChannelCreateWithoutChannelUsersInput = {
    name?: string | null
    description?: string | null
    password?: string | null
    type: $Enums.ChannelType
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChannelMessageCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutChannelUsersInput = {
    id?: number
    name?: string | null
    description?: string | null
    password?: string | null
    type: $Enums.ChannelType
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ChannelMessageUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutChannelUsersInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutChannelUsersInput, ChannelUncheckedCreateWithoutChannelUsersInput>
  }

  export type UserUpsertWithoutChannelUserInput = {
    update: XOR<UserUpdateWithoutChannelUserInput, UserUncheckedUpdateWithoutChannelUserInput>
    create: XOR<UserCreateWithoutChannelUserInput, UserUncheckedCreateWithoutChannelUserInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChannelUserInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChannelUserInput, UserUncheckedUpdateWithoutChannelUserInput>
  }

  export type UserUpdateWithoutChannelUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
    avatar?: AvatarUpdateOneWithoutUserNestedInput
    message?: ChannelMessageUpdateManyWithoutFromUserNestedInput
    friends?: FriendsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChannelUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    avatarId?: NullableIntFieldUpdateOperationsInput | number | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
    message?: ChannelMessageUncheckedUpdateManyWithoutFromUserNestedInput
    friends?: FriendsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChannelUpsertWithoutChannelUsersInput = {
    update: XOR<ChannelUpdateWithoutChannelUsersInput, ChannelUncheckedUpdateWithoutChannelUsersInput>
    create: XOR<ChannelCreateWithoutChannelUsersInput, ChannelUncheckedCreateWithoutChannelUsersInput>
    where?: ChannelWhereInput
  }

  export type ChannelUpdateToOneWithWhereWithoutChannelUsersInput = {
    where?: ChannelWhereInput
    data: XOR<ChannelUpdateWithoutChannelUsersInput, ChannelUncheckedUpdateWithoutChannelUsersInput>
  }

  export type ChannelUpdateWithoutChannelUsersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChannelMessageUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutChannelUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ChannelMessageUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateWithoutMessagesInput = {
    name?: string | null
    description?: string | null
    password?: string | null
    type: $Enums.ChannelType
    createdAt?: Date | string
    updatedAt?: Date | string
    channelUsers?: ChannelUserCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutMessagesInput = {
    id?: number
    name?: string | null
    description?: string | null
    password?: string | null
    type: $Enums.ChannelType
    createdAt?: Date | string
    updatedAt?: Date | string
    channelUsers?: ChannelUserUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutMessagesInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutMessageInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon?: number
    gamesLost?: number
    score?: number
    userSecret?: string | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash?: string | null
    hashedRt?: string | null
    blockedIds?: UserCreateblockedIdsInput | number[]
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
    avatar?: AvatarCreateNestedOneWithoutUserInput
    channelUser?: ChannelUserCreateNestedManyWithoutUserInput
    friends?: FriendsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMessageInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon?: number
    gamesLost?: number
    score?: number
    userSecret?: string | null
    avatarId?: number | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash?: string | null
    hashedRt?: string | null
    blockedIds?: UserCreateblockedIdsInput | number[]
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
    channelUser?: ChannelUserUncheckedCreateNestedManyWithoutUserInput
    friends?: FriendsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMessageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessageInput, UserUncheckedCreateWithoutMessageInput>
  }

  export type ChannelUpsertWithoutMessagesInput = {
    update: XOR<ChannelUpdateWithoutMessagesInput, ChannelUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChannelCreateWithoutMessagesInput, ChannelUncheckedCreateWithoutMessagesInput>
    where?: ChannelWhereInput
  }

  export type ChannelUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChannelWhereInput
    data: XOR<ChannelUpdateWithoutMessagesInput, ChannelUncheckedUpdateWithoutMessagesInput>
  }

  export type ChannelUpdateWithoutMessagesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelUsers?: ChannelUserUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumChannelTypeFieldUpdateOperationsInput | $Enums.ChannelType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelUsers?: ChannelUserUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type UserUpsertWithoutMessageInput = {
    update: XOR<UserUpdateWithoutMessageInput, UserUncheckedUpdateWithoutMessageInput>
    create: XOR<UserCreateWithoutMessageInput, UserUncheckedCreateWithoutMessageInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessageInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessageInput, UserUncheckedUpdateWithoutMessageInput>
  }

  export type UserUpdateWithoutMessageInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
    avatar?: AvatarUpdateOneWithoutUserNestedInput
    channelUser?: ChannelUserUpdateManyWithoutUserNestedInput
    friends?: FriendsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    avatarId?: NullableIntFieldUpdateOperationsInput | number | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
    channelUser?: ChannelUserUncheckedUpdateManyWithoutUserNestedInput
    friends?: FriendsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChannelMessageCreateManyFromUserInput = {
    id?: number
    createdAt?: Date | string
    channelId: number
    message: string
  }

  export type ChannelUserCreateManyUserInput = {
    id?: number
    channelId: number
    role: $Enums.ChannelUserRole
    socketIds?: ChannelUserCreatesocketIdsInput | string[]
  }

  export type FriendsCreateManyUserInput = {
    id?: number
    friendId: number
  }

  export type ChannelMessageUpdateWithoutFromUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    channel?: ChannelUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type ChannelMessageUncheckedUpdateWithoutFromUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelMessageUncheckedUpdateManyWithoutFromUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    channelId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelUserUpdateWithoutUserInput = {
    role?: EnumChannelUserRoleFieldUpdateOperationsInput | $Enums.ChannelUserRole
    socketIds?: ChannelUserUpdatesocketIdsInput | string[]
    channel?: ChannelUpdateOneRequiredWithoutChannelUsersNestedInput
  }

  export type ChannelUserUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    role?: EnumChannelUserRoleFieldUpdateOperationsInput | $Enums.ChannelUserRole
    socketIds?: ChannelUserUpdatesocketIdsInput | string[]
  }

  export type ChannelUserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    channelId?: IntFieldUpdateOperationsInput | number
    role?: EnumChannelUserRoleFieldUpdateOperationsInput | $Enums.ChannelUserRole
    socketIds?: ChannelUserUpdatesocketIdsInput | string[]
  }

  export type FriendsUpdateWithoutUserInput = {
    friendId?: IntFieldUpdateOperationsInput | number
  }

  export type FriendsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    friendId?: IntFieldUpdateOperationsInput | number
  }

  export type FriendsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    friendId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManyAvatarInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: string
    username: string
    isLogged: boolean
    inChat: boolean
    inGame: boolean
    gamesWon?: number
    gamesLost?: number
    score?: number
    userSecret?: string | null
    IstwoFactorAuth: boolean
    IsSigninWith42: boolean
    hash?: string | null
    hashedRt?: string | null
    blockedIds?: UserCreateblockedIdsInput | number[]
    achievementChat?: boolean
    achievementPong?: boolean
    achievementAvatar?: boolean
  }

  export type UserUpdateWithoutAvatarInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
    message?: ChannelMessageUpdateManyWithoutFromUserNestedInput
    channelUser?: ChannelUserUpdateManyWithoutUserNestedInput
    friends?: FriendsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAvatarInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
    message?: ChannelMessageUncheckedUpdateManyWithoutFromUserNestedInput
    channelUser?: ChannelUserUncheckedUpdateManyWithoutUserNestedInput
    friends?: FriendsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAvatarInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    isLogged?: BoolFieldUpdateOperationsInput | boolean
    inChat?: BoolFieldUpdateOperationsInput | boolean
    inGame?: BoolFieldUpdateOperationsInput | boolean
    gamesWon?: IntFieldUpdateOperationsInput | number
    gamesLost?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    userSecret?: NullableStringFieldUpdateOperationsInput | string | null
    IstwoFactorAuth?: BoolFieldUpdateOperationsInput | boolean
    IsSigninWith42?: BoolFieldUpdateOperationsInput | boolean
    hash?: NullableStringFieldUpdateOperationsInput | string | null
    hashedRt?: NullableStringFieldUpdateOperationsInput | string | null
    blockedIds?: UserUpdateblockedIdsInput | number[]
    achievementChat?: BoolFieldUpdateOperationsInput | boolean
    achievementPong?: BoolFieldUpdateOperationsInput | boolean
    achievementAvatar?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ChannelMessageCreateManyChannelInput = {
    id?: number
    createdAt?: Date | string
    fromUserId: number
    message: string
  }

  export type ChannelUserCreateManyChannelInput = {
    id?: number
    userId: number
    role: $Enums.ChannelUserRole
    socketIds?: ChannelUserCreatesocketIdsInput | string[]
  }

  export type ChannelMessageUpdateWithoutChannelInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    fromUser?: UserUpdateOneRequiredWithoutMessageNestedInput
  }

  export type ChannelMessageUncheckedUpdateWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromUserId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelMessageUncheckedUpdateManyWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromUserId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelUserUpdateWithoutChannelInput = {
    role?: EnumChannelUserRoleFieldUpdateOperationsInput | $Enums.ChannelUserRole
    socketIds?: ChannelUserUpdatesocketIdsInput | string[]
    user?: UserUpdateOneRequiredWithoutChannelUserNestedInput
  }

  export type ChannelUserUncheckedUpdateWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: EnumChannelUserRoleFieldUpdateOperationsInput | $Enums.ChannelUserRole
    socketIds?: ChannelUserUpdatesocketIdsInput | string[]
  }

  export type ChannelUserUncheckedUpdateManyWithoutChannelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    role?: EnumChannelUserRoleFieldUpdateOperationsInput | $Enums.ChannelUserRole
    socketIds?: ChannelUserUpdatesocketIdsInput | string[]
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AvatarCountOutputTypeDefaultArgs instead
     */
    export type AvatarCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AvatarCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelCountOutputTypeDefaultArgs instead
     */
    export type ChannelCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ChannelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FriendsDefaultArgs instead
     */
    export type FriendsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FriendsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AvatarDefaultArgs instead
     */
    export type AvatarArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AvatarDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelDefaultArgs instead
     */
    export type ChannelArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ChannelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelUserDefaultArgs instead
     */
    export type ChannelUserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ChannelUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChannelMessageDefaultArgs instead
     */
    export type ChannelMessageArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ChannelMessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SourceBansDefaultArgs instead
     */
    export type SourceBansArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = SourceBansDefaultArgs<ExtArgs>
    /**
     * @deprecated Use runningamesDefaultArgs instead
     */
    export type runningamesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = runningamesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use gameHistoryDefaultArgs instead
     */
    export type gameHistoryArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = gameHistoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
import { PrismaService } from "src/prisma/prisma.service";
import { UserNameDto } from "./dto";
import { Avatar, User } from "@prisma/client";
export declare class UserService {
    private prisma;
    constructor(prisma: PrismaService);
    updateUsername(userId: number, lastUsername: string, UsernameDto: UserNameDto): Promise<void>;
    updateAvatar(userId: number, lastUsername: string, avatar: Avatar): Promise<number>;
    getUsersList(): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        username: string;
        isLogged: boolean;
        inChat: boolean;
        inGame: boolean;
        gamesWon: number;
        gamesLost: number;
        score: number;
        userSecret: string;
        firstLogin: boolean;
        avatarId: number;
        IstwoFactorAuth: boolean;
        IsSigninWith42: boolean;
        hash: string;
        hashedRt: string;
        blockedIds: number[];
        achievementChat: boolean;
        achievementPong: boolean;
        achievementAvatar: boolean;
    }[]>;
    getUserById(id: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        username: string;
        isLogged: boolean;
        inChat: boolean;
        inGame: boolean;
        gamesWon: number;
        gamesLost: number;
        score: number;
        userSecret: string;
        firstLogin: boolean;
        avatarId: number;
        IstwoFactorAuth: boolean;
        IsSigninWith42: boolean;
        hash: string;
        hashedRt: string;
        blockedIds: number[];
        achievementChat: boolean;
        achievementPong: boolean;
        achievementAvatar: boolean;
    }>;
    getNonFriends(userId: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        username: string;
        isLogged: boolean;
        inChat: boolean;
        inGame: boolean;
        gamesWon: number;
        gamesLost: number;
        score: number;
        userSecret: string;
        firstLogin: boolean;
        avatarId: number;
        IstwoFactorAuth: boolean;
        IsSigninWith42: boolean;
        hash: string;
        hashedRt: string;
        blockedIds: number[];
        achievementChat: boolean;
        achievementPong: boolean;
        achievementAvatar: boolean;
    }[]>;
    getFriends(userId: number): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        email: string;
        username: string;
        isLogged: boolean;
        inChat: boolean;
        inGame: boolean;
        gamesWon: number;
        gamesLost: number;
        score: number;
        userSecret: string;
        firstLogin: boolean;
        avatarId: number;
        IstwoFactorAuth: boolean;
        IsSigninWith42: boolean;
        hash: string;
        hashedRt: string;
        blockedIds: number[];
        achievementChat: boolean;
        achievementPong: boolean;
        achievementAvatar: boolean;
    }[]>;
    addFriend(userId: number, friendId: number): Promise<boolean>;
    deleteFriend(userId: number, friendId: number): Promise<boolean>;
    getUsersSortedByScore(): Promise<User[]>;
}

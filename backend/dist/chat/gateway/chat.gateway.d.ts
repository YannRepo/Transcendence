import { OnModuleInit } from "@nestjs/common";
import { OnGatewayConnection, OnGatewayDisconnect } from "@nestjs/websockets";
import { Socket } from "socket.io";
import { AuthService } from "src/auth/auth.service";
import { ChannelUsersService } from "../users/channelusers.service";
import { PrismaService } from "src/prisma/prisma.service";
import { MessageService } from "../message/message.service";
import { ChannelDto } from "../channel/dto";
import { ChannelService } from "../channel/channel.service";
import { ChannelMessageDto } from "../message/dto";
import { Channel, ChannelUser, User } from "@prisma/client";
import { SourcebansDto } from "../users/dto";
import { UserService } from "src/auth/user/user.service";
export declare class ChatGateway implements OnModuleInit, OnGatewayConnection, OnGatewayDisconnect {
    private auth;
    private channel;
    private channeluser;
    private prisma;
    private messages;
    private user;
    constructor(auth: AuthService, channel: ChannelService, channeluser: ChannelUsersService, prisma: PrismaService, messages: MessageService, user: UserService);
    private server;
    private arr_connectedUsersId;
    private arr_connectedSocketsId;
    onModuleInit(): void;
    handleConnection(client: Socket): Promise<void>;
    handleDisconnect(client: Socket): Promise<void>;
    Event_OnChannelTurnedPrivate(client: Socket, status: boolean, channelId: number): Promise<boolean>;
    Event_OnNameChanged(client: Socket, name: string, channelId: number): Promise<boolean>;
    Event_OnDescriptionChanged(client: Socket, description: string, channelId: number): Promise<boolean>;
    Event_OnChannelPasswordChanged(client: Socket, password: string, channelId: number): Promise<boolean>;
    Event_OnAdminAdded(client: Socket, userToCheck: ChannelUser): Promise<boolean>;
    Event_OnUserKicked(client: Socket, userToKick: ChannelUser, channelId: number): Promise<boolean>;
    Event_OnUserPunished(client: Socket, dto: SourcebansDto, channelId: number): Promise<boolean>;
    Event_OnUserUnmutted(client: Socket, userToUnmute: ChannelUser): Promise<void>;
    Event_OnChannelCreated(client: Socket, dto: ChannelDto): Promise<void>;
    Event_OnChannelJoined(client: Socket, password: string, channel: Channel): Promise<boolean>;
    Event_OnConversationCreatedOrJoined(client: Socket, withUserId: number): Promise<boolean>;
    Event_OnDisconnectedClient(client: Socket, channelId: number): Promise<void>;
    Event_OnNewMessage(client: Socket, body: ChannelMessageDto): Promise<void>;
    Event_OnUserBlocked(client: Socket, userIdToBlock: number, channelIdEmitted: number): Promise<void>;
    Event_OnUserUnblocked(client: Socket, userIdToUnblock: number, channelIdEmitted: number): Promise<void>;
    event_sendInvitationToPlay(client: Socket, toUser: ChannelUser): Promise<void>;
    event_acceptInvitationToPlay(client: Socket, fromUserId: number, fromSocketId: string): Promise<boolean>;
    generateName(prefix: string): string;
    isSocketFromChat(client: Socket): boolean;
    isSocketIdConnected(socketId: string): Promise<boolean>;
    isUserAdmin(user: User, channelId: number, onlyOwner: boolean): Promise<boolean>;
    isUserPunished(user: ChannelUser, type: string): Promise<boolean>;
    isUserIdBlocked(user: User, userId: number): Promise<boolean>;
    isUserAlreadyInGame(userId: number): Promise<boolean>;
    getConversationWithUserIfExists(fromUser: User, withUser: User): Promise<{
        channelUsers: ({
            user: {
                id: number;
                createdAt: Date;
                updatedAt: Date;
                email: string;
                username: string;
                isLogged: boolean;
                inChat: boolean;
                inGame: boolean;
                gamesWon: number;
                gamesLost: number;
                score: number;
                userSecret: string;
                firstLogin: boolean;
                avatarId: number;
                IstwoFactorAuth: boolean;
                IsSigninWith42: boolean;
                hash: string;
                hashedRt: string;
                blockedIds: number[];
                achievementChat: boolean;
                achievementPong: boolean;
                achievementAvatar: boolean;
            };
        } & {
            id: number;
            userId: number;
            channelId: number;
            role: import(".prisma/client").$Enums.ChannelUserRole;
            socketIds: string[];
        })[];
    } & {
        id: number;
        name: string;
        description: string;
        password: string;
        type: import(".prisma/client").$Enums.ChannelType;
        createdAt: Date;
        updatedAt: Date;
    }>;
    updateChannelListForUsers(): Promise<void>;
    updateConversationListForUsers(): Promise<void>;
    updateChannelForUsers(channelId: number): Promise<void>;
    updateUserStatusForAll(): Promise<void>;
    checkForChatAchievement(userId: number, socketId: string): Promise<void>;
}
